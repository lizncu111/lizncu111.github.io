<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3的底层实现-响应式数据的Proxy</title>
      <link href="/posts/fa8e6bb7/"/>
      <url>/posts/fa8e6bb7/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3的底层实现-响应式数据的proxy">Vue3的底层实现-响应式数据的Proxy</h1><h3 id="介绍">介绍</h3><p>相对于Vue2的defineProperty的实现，Vue3采用Proxy的实现。defineProperty为静态方法因此无法监听新增属性/删除属性，并且无法直接监听数组。</p><p>主要通过Reflect的四个方法操作语言内部的属性，Reflect的原型就是Object。</p><p>Reflect.get(目标对象，属性名，上下文对象) – 读取对象属性</p><p>Reflect.set(目标属性，属性名，属性值，上下文对象）-- 设置对象属性</p><p>Reflect.deleteProperty(目标对象，属性名）-- 删除对象属性</p><p>Reflect.ownKeys(目标对象）-- 返回由目标对象自身的属性（只处理本身-非原型的属性）组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建响应式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123; </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> target == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target <span class="comment">// 不是对象或数组直接返回</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 代理配置</span></span><br><span class="line">   <span class="keyword">const</span> proxyConf = &#123;</span><br><span class="line">~<span class="title function_">get</span>(<span class="params">targe, key, receiver</span>) &#123;</span><br><span class="line"><span class="comment">// 只处理本身（非原型）的属性</span></span><br><span class="line"><span class="keyword">const</span> ownKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target)</span><br><span class="line"><span class="keyword">if</span>(ownKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>, key) <span class="comment">// 监听</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// 返回不做处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">reactive</span>(result) <span class="comment">// 递归调用，这里所做的优化是只在调用到对象深层次的属性时才会触发递归</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="title function_">set</span>(<span class="params">target, key, val, receiver</span>) &#123;</span><br><span class="line">   <span class="comment">// 重复的数组，不处理</span></span><br><span class="line">   <span class="keyword">if</span>(val === target[key])  &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> ownKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target)</span><br><span class="line"><span class="keyword">if</span>(ownKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set 已有的属性&#x27;</span>, key) <span class="comment">// 监听</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set 新增的属性&#x27;</span>, key)</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val, receiver)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, key, val)</span><br><span class="line">   <span class="keyword">return</span> result  <span class="comment">// 是否设置成功</span></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deleteProperty&#x27;</span>, key)</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 生成代理 对象</span></span><br><span class="line"><span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, proxyConf)</span><br><span class="line"><span class="keyword">return</span> observed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如获取对象 a 中属性 d 的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">   <span class="attr">b</span>: &#123;</span><br><span class="line">   <span class="attr">c</span>: &#123;</span><br><span class="line">   <span class="attr">d</span>: <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ref_a = <span class="title function_">reactive</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ref_a.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span>)</span><br></pre></td></tr></table></figure><p>get 方法总共会调用3次，即进行三次递归，直到下一次 get 的不是对象或者数组。<br>与definePropety的区别是，proxy只有我们读取到对象深层次的属性时，才会触发递归，而definePropety的深度监听会一次性监听所有数据。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构-跳跃表</title>
      <link href="/posts/c06b6f41/"/>
      <url>/posts/c06b6f41/</url>
      
        <content type="html"><![CDATA[<h1 id="redis数据结构-跳跃表">Redis数据结构-跳跃表</h1><h3 id="介绍">介绍</h3><p>跳跃表（<em>Skiplist</em>）是一种有序数据结构，它通过每个节点中维护多个指向其他节点的指针，从而达到快速访问节点的目的。<br>大部分条件下，跳跃表的效率与平衡树相当，但跳跃表实现更加简单。<br>Redis使用跳跃表作为有序集合键的底层实现之一，若有序集合包含元素数量较多，又或者有序集合成员是比较长的字符串时，Redis就会使用跳跃表。</p><h4 id="图示">图示</h4><p><img src="/img/skiplist.png" alt="跳跃表图示" title="skiplist"><br>想要实现跳跃表，首先要实现一条有序链表。<br>想到查找优化很容易想到二分查找，将有序链表划分成多个区间，构建一级索引，一级索引节点的指针指向下一个一级索引，同时指向下级节点。图中划分的跨度为2，即每一个一级索引节点管辖着两个节点。搜索时从索引头开始，例如搜索9，从一级索引节点头跳跃3次，发现索引节点11大于9，进行回退后进入下一级节点7，向前跳跃1次找到9。<br>同理，在一级索引的基础上构建二级索引，甚至更高层索引。（Redis的最高索引为32）</p><p>可以发现，跳跃表的查找实现起来很容易，而如何构建节点在索引中的位置，是一个难点。</p><p>Redis通过随机层随机指数函数确认节点层数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">RandomLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> level = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rand() / RAND_MAX -&gt; [0, 1]</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">rand</span>() &lt;= RAND_MAX * _p &amp;&amp; level &lt;= _maxLevel)</span><br><span class="line">    &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中_p为层权重，一般设置为0.5，_maxLevel为预设最高层。<br>该函数使得节点的层数符合指数分布，例如在1级索引的节点概率为0.5，2级概率为0.25，3级概率为0.125。</p><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SkipListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> _val;</span><br><span class="line">    std::vector&lt;SkipListNode*&gt; _nextV;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SkipListNode</span>(<span class="type">int</span> val, <span class="type">int</span> level)</span><br><span class="line">        : _val(val)</span><br><span class="line">        , _nextV(level, <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Skiplist</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> SkipListNode Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Skiplist</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"></span><br><span class="line">        _head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>, <span class="number">1</span>); <span class="comment">// 头节点，层数是1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Search</span><span class="params">(<span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* cur = _head;</span><br><span class="line">        <span class="type">int</span> level = _head-&gt;_nextV.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (level &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;_nextV[level] &amp;&amp; target &gt; cur-&gt;_nextV[level]-&gt;_val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 目标值比下一个结点值大，向右走</span></span><br><span class="line">                cur = cur-&gt;_nextV[level];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!cur-&gt;_nextV[level] || target &lt; cur-&gt;_nextV[level]-&gt;_val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 下一个结点是空(尾) || 目标值比下一个节点值要小，向下走</span></span><br><span class="line">                level--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::vector&lt;Node*&gt; preV = <span class="built_in">FindPrevNode</span>(num);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">RandomLevel</span>();</span><br><span class="line">        Node* newnode = <span class="keyword">new</span> <span class="built_in">Node</span>(num, n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果n超过当前最大的层数，那就升高一下_head的层数</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; _head-&gt;_nextV.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            _head-&gt;_nextV.<span class="built_in">resize</span>(n, <span class="literal">nullptr</span>);</span><br><span class="line">            preV.<span class="built_in">resize</span>(n, _head);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链接前后结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            newnode-&gt;_nextV[i] = preV[i]-&gt;_nextV[i];</span><br><span class="line">            preV[i]-&gt;_nextV[i] = newnode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Erase</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::vector&lt;Node*&gt; preV = <span class="built_in">FindPrevNode</span>(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一层下一个不是val，则val不在表中</span></span><br><span class="line">        <span class="keyword">if</span> (!preV[<span class="number">0</span>]-&gt;_nextV[<span class="number">0</span>] || preV[<span class="number">0</span>]-&gt;_nextV[<span class="number">0</span>]-&gt;_val != num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node* del = preV[<span class="number">0</span>]-&gt;_nextV[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// del结点每一层前后指针链接起来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; del-&gt;_nextV.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            preV[i]-&gt;_nextV[i] = del-&gt;_nextV[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> del;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果删除最高层结点，把头节点的层数也降一下</span></span><br><span class="line">        <span class="comment">// 可以稍微提高查找效率</span></span><br><span class="line">        <span class="type">int</span> i = _head-&gt;_nextV.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_head-&gt;_nextV[i])</span><br><span class="line">            &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _head-&gt;_nextV.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SkipList精髓</span></span><br><span class="line">    <span class="function">std::vector&lt;Node*&gt; <span class="title">FindPrevNode</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* cur = _head;</span><br><span class="line">        <span class="type">int</span> level = _head-&gt;_nextV.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入位置每一层前一个结点指针</span></span><br><span class="line">        <span class="function">std::vector&lt;Node*&gt; <span class="title">preV</span><span class="params">(level + <span class="number">1</span>, _head)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (level &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;_nextV[level] &amp;&amp; num &gt; cur-&gt;_nextV[level]-&gt;_val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 目标值比下一个结点值大，向右走</span></span><br><span class="line">                cur = cur-&gt;_nextV[level];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!cur-&gt;_nextV[level] || num &lt;= cur-&gt;_nextV[level]-&gt;_val)</span><br><span class="line">            &#123;</span><br><span class="line">                preV[level--] = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// v1.0 C</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">RandomLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> level = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rand() / RAND_MAX -&gt; [0, 1]</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">rand</span>() &lt;= RAND_MAX * _p &amp;&amp; level &lt;= _maxLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// v2.0 C++</span></span><br><span class="line">    <span class="comment">// int RandomLevel()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     static std::default_random_engine generator(std::chrono::system_clock::now().time_since_epoch().count());</span></span><br><span class="line">    <span class="comment">// static std::uniform_real_distribution&lt;double&gt; distribution(0.0, 1.0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// size_t level = 1;</span></span><br><span class="line">    <span class="comment">// while (distribution(generator) &lt;= _p &amp;&amp; level &lt; _maxLevel)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// ++level;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// return level;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* _head;</span><br><span class="line">    <span class="type">size_t</span> _maxLevel = <span class="number">32</span>;</span><br><span class="line">    <span class="type">double</span> _p = <span class="number">0.5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ol><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/">leetcode 1206. 设计跳表</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/posts/9acb5cb3/"/>
      <url>/posts/9acb5cb3/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成树">最小生成树</h1><h2 id="克鲁斯卡尔算法">克鲁斯卡尔算法</h2><h3 id="介绍">介绍</h3><p>克鲁斯卡尔（<em>Kruskal</em> 算法）是一种常见并且好写的最小生成树算法，该算法的基本思想是从小到大加入边，是个贪心算法。<br>tip. 无向连通图的<strong>最小生成树</strong>（<em>Minimum Spanning Tree，MST</em>）为边权和最小的生成树。</p><h4 id="图示">图示</h4><p><img src="/img/kruskal.apng" alt="克鲁斯卡尔图示" title="kruskal"></p><p>先将原图中所有边去除，算法的每一轮在保证不出现环的情况下添加一条权最小的边。</p><p>算法的关键在于判断图是否出现环，可以用<strong>并查集</strong>进行实现。</p><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; father; <span class="comment">//记录每个节点的父亲</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result; <span class="comment">//存储最后获得的各条边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.weight &lt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findfather</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a != father[a])</span><br><span class="line">&#123;</span><br><span class="line">a = father[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">(<span class="type">int</span> n, vector&lt;edge&gt; Edge)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">father.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="built_in">sort</span>(Edge.<span class="built_in">begin</span>(), Edge.<span class="built_in">end</span>(), compare);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Edge.<span class="built_in">size</span>() &amp;&amp; result.<span class="built_in">size</span>() &lt; n<span class="number">-1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = Edge[i].u;</span><br><span class="line"><span class="type">int</span> v = Edge[i].v;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">findfather</span>(u) != <span class="built_in">findfather</span>(v)) <span class="comment">//判断父节点是否相同</span></span><br><span class="line">&#123;</span><br><span class="line">result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;u,v&#125;);</span><br><span class="line">father[<span class="built_in">findfather</span>(u)] = father[<span class="built_in">findfather</span>(v)]; <span class="comment">//将两点并入一个集合中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result.<span class="built_in">size</span>() != n - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;  result.<span class="built_in">size</span>()  &lt;&lt; <span class="string">&quot;该图不连通&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最小生成树的各边如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; result[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; result[i][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m\log m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol><h2 id="普里姆算法">普里姆算法</h2><h3 id="介绍">介绍</h3><p>普里姆算法（<em>Prim</em> 算法）不同于克鲁斯卡尔算法的加边，而是需要加点。</p><h4 id="图示">图示</h4><p><img src="/img/prim.apng" alt="普里姆图示" title="prim"></p><p>从任意点开始，首先加入与该点距离最近的点，构成一个两点图。再加入一个与两点中任意一点距离最近的点，构成一个三点图，以此类推，直到所有点连通。（图中不能形成环）</p><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prim</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;father;</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;result;</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;graph;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findfather</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a != father[a])</span><br><span class="line">&#123;</span><br><span class="line">a = father[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Prim</span>(<span class="type">int</span> n, std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;graph):<span class="built_in">n</span>(n),<span class="built_in">graph</span>(graph)&#123;</span><br><span class="line">father.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getTree</span>()&#123;</span><br><span class="line">std::unordered_set&lt;<span class="type">int</span>&gt;isVisit;</span><br><span class="line">isVisit.<span class="built_in">emplace</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(isVisit.<span class="built_in">size</span>()&lt;n)&#123;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;minNode=&#123;INT_MAX/<span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;<span class="comment">// 加入点到图距离，加入点的序号，加入边对应的另一点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = isVisit.<span class="built_in">begin</span>(); it != isVisit.<span class="built_in">end</span>(); ++it)&#123;</span><br><span class="line"><span class="type">int</span> currentNode = *it;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(minNode[<span class="number">0</span>]&gt;graph[currentNode][i]&amp;&amp;!isVisit.<span class="built_in">count</span>(i))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">findfather</span>(currentNode) != <span class="built_in">findfather</span>(i)) <span class="comment">//判断父节点是否相同</span></span><br><span class="line">&#123;</span><br><span class="line">minNode = &#123;graph[currentNode][i], i, currentNode&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(minNode[<span class="number">1</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;该图不连通&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">isVisit.<span class="built_in">emplace</span>(minNode[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 加入集合</span></span><br><span class="line">father[<span class="built_in">findfather</span>(minNode[<span class="number">1</span>])] = father[<span class="built_in">findfather</span>(minNode[<span class="number">2</span>])];</span><br><span class="line">result.<span class="built_in">emplace_back</span>(std::vector&lt;<span class="type">int</span>&gt;&#123;minNode[<span class="number">1</span>], minNode[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输出的result即为最小生成树的每一边</p><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弗洛伊德算法</title>
      <link href="/posts/c8e303a5/"/>
      <url>/posts/c8e303a5/</url>
      
        <content type="html"><![CDATA[<h1 id="弗洛伊德算法">弗洛伊德算法</h1><h3 id="介绍">介绍</h3><p>弗洛伊德算法（<em>Floyd</em> 算法），用于求任意两节点最短路，相比迪杰斯特拉算法时间复杂度较高，但易实现。<strong>适用于任何图</strong>，不管有向无向，边权正负，但是最短路必须存在。（不能有负环）</p><h4 id="图示">图示</h4><p><img src="/img/Floyd.png" alt="Floyd图示1" title="Floyd1"><br>先将图转换为邻接矩阵<br>Floyd 算法需要对图中每一个节点进行维护，更新其他节点经过该节点抵达另外节点的距离，使得该距离最小。</p><p><img src="/img/Floyd2.png" alt="Floyd图示2" title="Floyd2"><br>例如，第一次更新A节点，B经过A到C的距离为2+3，B经过A到D的距离为2+6，C经过A到D的距离为3+6。<br>又因为C到D邻接矩阵的距离为2小于9，因此不更新C到D的边。添加新边BC、BD，因为当前邻接矩阵不可达，更新邻接矩阵。</p><p><strong>依次类推</strong>，当最后一个节点F更新完成后，算法结束，邻接矩阵内更新为最短路径。</p><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;f, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; n; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++) &#123;</span><br><span class="line">                f[x][y] = <span class="built_in">min</span>(f[x][y],f[x][k]+f[k][y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 f 为邻接矩阵，n 为节点个数。</p><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/network-delay-time/">leetcode 743.网络延迟时间</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恋活2BangDream人物卡</title>
      <link href="/posts/5b082906/"/>
      <url>/posts/5b082906/</url>
      
        <content type="html"><![CDATA[<h1 id="恋活2bangdream人物卡">恋活2BangDream人物卡</h1><h2 id="mod">MOD</h2><p>大部分人物卡需要依赖mod</p><h3 id="人物卡整合包">人物卡整合包</h3><p><img src="/img/lianhuo2Bangdream.jpg" alt="mod展示" title="lianhuo2Bangdream"><br>台湾人做的mod，禁止商用。</p><p><a href="https://mega.nz/file/9IUhSZRR#NSvCzfU27TbYn5rAYs5lRVl8msYm-Ud7tCCUo3u5AbU">点我下载</a></p><h3 id="若叶睦">若叶睦</h3><p><img src="/img/lian_card1.webp" alt="mod展示" title="lianhuo2Bangdream"><br>搬运至BepisDb<br><a href="https://db.bepis.moe/koikatsu/view/354761">点我下载</a></p><h3 id="丸山彩">丸山彩</h3><p><img src="/img/lian_card4.webp" alt="mod展示" title="lianhuo2Bangdream"><br>搬运至BepisDb<br><a href="https://db.bepis.moe/koikatsu/view/349473">点我下载</a></p><h3 id="千早爱音">千早爱音</h3><p><img src="/img/lian_card3.webp" alt="mod展示" title="lianhuo2Bangdream"><br>搬运至BepisDb<br><a href="https://db.bepis.moe/koikatsu/view/348275">点我下载</a></p><h3 id="高松灯">高松灯</h3><p><img src="/img/lian_card2.webp" alt="mod展示" title="lianhuo2Bangdream"><br>搬运至BepisDb<br><a href="https://db.bepis.moe/koikatsu/view/338394">点我下载</a></p><hr><h3 id="相关链接">相关链接</h3><p><a href="https://www.pixiv.net/artworks/110737218">Pixiv-【コイカツ】BangDream model 配布</a><br><a href="https://db.bepis.moe/">BepisDB</a></p>]]></content>
      
      
      <categories>
          
          <category> 恋活系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BangDream </tag>
            
            <tag> 恋活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强健凑有希那！</title>
      <link href="/posts/3d611be0/"/>
      <url>/posts/3d611be0/</url>
      
        <content type="html"><![CDATA[<h1 id="强健凑有希那">强健凑有希那！</h1><p>男子慢慢地打开木纹的门。做了自己身体进入的极限的间隙，像滑进去一样进入了室内。<br>里面被黑暗吞没了。<br>男子小心翼翼地走，以免留下脚印。然后，我看到了在放在室内的床上躺着的凑友希那。走到仰面熟睡的友希那身边，用更加慎重的手势放下了自己的裤子。出来的白色内裤像帐篷一样贴在前面。男人把内裤也放下了。于是，耸立着的阴茎出现的同时，周围弥漫着酸臭。那是阴茎发出的臭味。因为好几天没洗澡，所以男人的阴茎非常臭。<br>“呵呵，友希那……”<br>在爱的朋友希那面前露出阴茎的这种状况，对男人来说是绝好的。男子把手伸向友希那的头。然后连刘海都抚摸了额头。然后用那只手握住阴茎，一口气开始捋起来。马上牛仔汁就渗出了，“哎呀，哎呀，哎呀”的声音在室内回响。<br>“友希那，友希那啊……”<br>小声呻吟的男子加快了呻吟的速度。已经到了极限。阴茎特别大了。涌上来的东西爬到了顶点。<br>那一瞬间，友希那闭着的双眼皮动了。<br>金黄色的眼睛在黑暗中浮现。<br>“啊……啊，你是谁……？”<br>友希那惊讶地抬头看了看男人。<br>“啊！嗯……”<br>男人在极度的困惑中如果没有停止挣扎。没能阻止。男人很快射精了。白色的精液从尖端飞出，泼到了混乱的友希那的脸上。<br>“啊……。啊……”<br>从阴茎上放手的男人往后退了。因为想在睡觉的朋友希那的脸上浇精液的讲究被打扰了，所以愕然了。友希那用手指把粘在脸上的精液缠在一起，抬起了上半身。<br>“友希那……。那个……”<br>面对断断续续说出话的男人，友希那望着手指上附着的精液。虽然在黑暗中很难看到，但是黏糊糊的那个不愉快地缠在手指上，从那里散发着青臭。<br>“这是……”<br>友希那很晚才认识到这种粘液是从男人身上释放出来的精液。然后突然恶心的心情就上来了。气得浑身发抖。视线中的手指上附着的精液作为巨大的污物映照着。<br>“你为什么要做这样的事——”<br>友希那迅速地瞪着男子大声说道。<br>“不是……”发出颤抖声音的男子阴茎无力地枯萎了。<br>“有什么不同？这是你的吧？”<br>“是友希那的错！”<br>男人很激动。黑暗中通红的脸很显眼。男子突然抓住友希那的刘海，就这样在脸上打了右拳。“砰”的一声，友希那感到了从鼻子流到脸上的刺痛。<br>「喂，你在干什么？」<br>“闭嘴！”<br>男子上了床，把友希那推到床垫上。<br>“我从傍晚就一直在等着你睡觉呢！”男子一边喊一边朝着仰面的友希那的脸打了一拳。坚硬的拳头猛击着鼻子，砰的一声。<br>“不，别这样。”<br>“这是你睡觉之前！在附近的公园！露宿！露宿！”男子的殴打没有停止。一边喊一边一个接一个地把拳头打给了友希那。“怎么会这样！别随便起来！察言观色！这个！这个啊！”<br>男子终于把手从友希那的头发上拿开了。被连续殴打的友希那面部肿胀，前牙也断了。男人把手伸向了友希那的淡紫色睡衣。那一瞬间，友希那反射性地喊着“住手！”抓住了男人的手臂。但是男子简单地把它推开，就像把睡衣撕下来一样脱了下来。薄布破裂的声音在黑暗的室内回响。<br>“住手！求你了！不行！”<br>“闭嘴！”<br>男子殴打友希那露出的腹部。紧握着的拳头钻进了友希那柔软的肚子里。友希那发出了呕吐时的“呜呜”声。男人接着剥掉了友希那的白色内裤。布再次破裂的声音响了。友希那小小的裂缝在黑暗中显露出来。<br>“嘿嘿……打扰了我的颜射，让我来付吧。”<br>不知什么时候站起来的抓住阴茎根本的男人打开了友希那的胯下。友希那一边尖叫一边抵抗，但敌不过男人的腕力。男子像是被仰面的朋友希那遮盖住一样，一口气把腰压了进去。凶猛的阴茎穿透友希那的裂缝，强行侵入其中。那一瞬间，在友希那心中流淌着一种砰砰的触感。那是破瓜的触感。友希那仰着身子尖叫着。这是撕裂黑暗的尖锐的悲鸣。这一生中从未感受到的强烈疼痛袭击了全身。<br>男子傻傻地把腰伸了出来。于是，令人眼花缭乱的快感穿透了。进入里面的阴茎在里面变得更大了。强行侵犯友希那的状况怎么也做不到，感觉很舒服。男人动了动腰。那是一个粗暴而又没有考虑的动作。任性的腰使友希那哭了起来。有一种平常冷静的理性发出声音而崩溃的感觉。男人用舌头掬起止不住溢出的眼泪。于是友希那的鼻子里散发着男人污臭的唾液，一下子恶心起来了。没有刷牙的男人的嘴像粪坑一样有强烈的臭味。<br>男子把腰更用力地伸了出来。每当阴茎在阴道中移动时，友希那就陷入了自己重要的东西被破坏的感觉。只有被连名字都不知道的男人全部破坏的无法拭去的绝望感。<br>“啊！已经……”<br>男子更用力地活动腰，把阴茎放入里面就在那里制止了。然后提心吊胆地颤抖着身体。<br>“嗯！”<br>友希那感觉到温暖的东西在肚子附近蔓延开来。“啊，不会吧……”慢慢地被身体不愉快地吸收了。那是精液。男人在友希那阴道的最深处撒了精液。<br>“啊，你在干什么……”<br>那就像是最后一道关口。一直以来守护的纯洁被男人随意玷污了。<br>把精液拿出来的男人拔了阴茎。友希那在床上脱了力。眼睛是虚的，半开的口中漏出了呼气。因为之前的激烈行为和在阴道中射精的绝望，连手指都不能动。<br>“嗯……。友希那，情况还不错。下次和他约会的时候，不是可以让他满足吗？呵呵。”<br>男人在黑暗中变傻啦。然后让舌头爬到静静流泪的友希那的嘴唇上。友希那把脸挪动起来反抗，像是把腥味的舌头推到一边。但是男人用强烈的腕力从左右按住脸，再次把舌头伸进了友希那的口内。男人用舌尖舔友希那柔软的里面。像爱一样舔着每一颗牙齿，注入自己的唾液，吸了友希那的唾液。于是大腿的阴茎再次燃烧起来。<br>“再打一枪。”<br>男子粗鲁地在友希那耳边低声私语，握住阴茎，让友希那的大腿接触到了他的尖端。温暖的触感从龟头流到整个阴茎，细微的快感给男人的内心带来了热量。<br>“等一下……不行。”<br>“嘿嘿，真讨厌。”<br>男子低声私语，把腰一下子扎了进去。已经被精液浸透的阴道很容易地接受了男人的竿。但是与此相反，友希那对举起来的阴茎的感觉发出了悲鸣。胯裂的痛觉使全身颤抖呻吟。<br>虽然是第二次，但是友希那里面是绝品。男子再次捂住友希那，摇了摇头。每当阴道和阴茎相互摩擦时，就会有电流般的快乐涌上心头，感到面部滚烫滚滚。男子握住友希那的双肩。在男人的身体里友希那哭喊着。男人望着这样的朋友希那，腰更快速地移动了。<br>“嗯，希望能更紧一点……”<br>男子嘟囔着，双手转到友希那纤细的脖子上。然后从左右紧紧地笼住力量，勒紧了友希那的脖子。那一瞬间阴道一下子缩了起来，把里面的阴茎紧紧地勒紧了。<br>“哇！哇……”空气供应中断的友希那双手在床垫上挣扎着睁大了双眼。脑中有“死”。自己的生命确实被男人的手威胁着。<br>“哦！情况变好了！”<br>男人一边动着腰一边高扬起来。友希那的肉的柔软在阴茎能更强烈地感到，火辣辣的快感在脑中流动着。男子更加加快了腰。爬阴茎的快感很快就达到了顶点。男子一边呻吟一边马上射精。虽然是第二次，但是把和第一次一样量的精液注入阴道的话，穿透的快感覆盖了全身。<br>“嗯……。心情真好啊……”<br>慢慢地从阴道拔出阴茎的男人用床单擦掉附着的精液。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      <categories>
          
          <category> 强健凑有希那系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> R18 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强健凑有希那</title>
      <link href="/posts/7e820d6/"/>
      <url>/posts/7e820d6/</url>
      
        <content type="html"><![CDATA[<h1 id="强健凑有希那">强健凑有希那</h1><p>那是第一次相对的威胁。在白色的背心上穿着卡其色的短裤，巨大的肉达磨。从松弛的嘴角，发出像狗一样粗暴的呼吸，粘稠的猥亵的双眼，潮湿地观察着友希那纤细的身体。<br>“嘿嘿，友希那……”<br>用颤抖的浊音说话的男人逼近了友希那。她一边露出令人毛骨悚然的笑容，一边躺在床上，覆盖在女高中生纤弱的躯体上。<br>“不，别这样——”<br>“嘿嘿……”<br>友希那纤细的四肢拼命的抵抗，让腰弯曲，两脚拍打的抵抗，男人用大人的身体强行按住，简单地组合了下来。用双手分别握住的友希那纤细的左右手腕压在床上，近距离凝视着仰面的友希那的脸。他像是在舔着透明肤色的美颜一样凝视着，让附近的香味扑鼻而来。<br>“嗯……。好香啊……。友希那的味道真好啊……”<br>男人一边喊着好闻，好闻，一边抽着鼻子，时不时地吐出一口污臭的气息。友希那近距离嗅到了被垃圾塞满的三角角般的臭味，觉得鼻梁发麻。<br>“啊，你！你知道这样做会怎么样吗？！”<br>友希那一边摆着好几次脸，一边向眼前的畜生发威。那双眼睛湿润着，眼角积存的眼泪，变成了小小的飞沫散落着。<br>满足了友希那的体臭的男人，其次，对友希那粗暴地落下了接吻。反抗的友希那转过脸避开落在嘴唇上的男人湿漉漉的大舌头，但是男人执拗而黏糊糊的追踪最终夺走了友希那的第一次。<br>嘴唇和嘴唇碰撞的瞬间，冰冷的东西在友希那的脊梁上奔跑，鸡皮疙瘩突然蔓延开来。<br>“嗯——”<br>友希那睁大眼睛发出了无法形容的悲鸣。这是一个连名字都不知道的男人擅自夺走了守护了十多年的纯洁的瞬间。一边压碎自己的舌头一边进入里面的男人的舌头的感觉和腐烂的鱼一样的口臭。黏糊糊的男人唾液的触感在口中蔓延，与呕吐感相似的厌恶填满了脑海。不久男子吸了友希那的嘴。水的声音在房间里回响。在没有空气的口中，彼此的舌头以零距离连接。在男人的口臭中，友希那尝到了无法逃避的舌头地狱。<br>“啊，哈哈……难道是第一次吗？呵呵……”从友希那脱口而出的男子发出粘糊糊的低沉声音。也许是因为兴奋，词尾颤抖着。“非常好吃哦。”<br>一边说着感想的男人，再次让舌头爬到友希那丰满的嘴唇上，舔了一下。因恐惧而畏缩的友希那毫无抵抗地接受了这一点。男人用舌尖品味了极品的肉感。满意地抬起脸的时候，唾液的线在嘴唇和舌头上拉着。<br>“那么……。大叔也认真起来了吧……”<br>从友希那放手的男人放下了自己的裤子，还把白色的公文包也放下了。<br>“嗯……！”<br>就在这时，房间里散发出恶臭，刺中了友希那的鼻子。是从男人屹立的阴茎发出的强烈的臭味。那是我从来没有闻到过的可怕的恶臭。是青臭和顽强的汗臭混合的腐臭。友希那从逼近的阴茎上转过脸，用手捂住鼻子和嘴。但是阴茎发出的恶臭很容易穿透赤手空拳侵入友希那的鼻孔，呼吸困难。胃中的内容物来到了喉咙。<br>“友希那，你会舔叔叔的这个吧？”<br>男子脸上露出了笑容。那个齿列发黄，和那样的口内环境的男人接吻了这样的事实，给友希那带来了更大的厌恶感。<br>“喂，舔……？”<br>阴茎上密密麻麻地粘着像牙齿一样发黄的神秘物体。友希那虽然不知道那是什嚒，但臭知道那是不干净的东西。光是臭味就这么讨厌，还舔那个，对友希那来说不是很好，但是不行。<br>“啊，肯定不愿意！”<br>他用力地吐出了带有对男人厌恶感的怒吼。但是，潜在的恐惧使其词尾颤抖。<br>“呵呵。别这么说，稍微试一下，说不定会喜欢呢？”<br>男子向友希那逼近。没有退路的朋友希那只能目不转睛地盯着逼近的肉达磨。骑上友希那的男子握住阴茎，在友希那的嘴上摩擦着尖端。<br>“不，不要……”<br>牡丹色圆润的龟头逼近眼前，酸涩的污臭缠绕在鼻孔上。吐泻的感觉再次涌上心头。<br>“友希那，张开嘴。”<br>我绝对不喜欢。死也不想打开。在紧闭着一个字的嘴唇下，一边紧闭着牙列一边咽着唾沫。<br>“没办法啊。那就这样！”<br>于是男子慢慢地伸出右手，用大拇指和食指拍了拍友希那的鼻子。于是，在那之前一直是鼻子呼吸的友希那无法呼吸，瞬间窒息感袭来。在无法吸入氧气的状态下痛苦持续着，不久友希那开口了。<br>男人没有放过那个。<br>“就是现在！”这名男子开玩笑地喊道，他把握住的阴茎的尖端塞进友希那的嘴里。就这样把腰向前突出，用阴茎占领了口内。长长的阴茎到达了友希那的喉咙，与刚才不同的有压迫感的窒息的痛苦再次袭击了友希那。<br>“啊啊……。友希那的嘴，好温暖啊……”<br>“嗯，嗯！嗯！”<br>到现在为止只用于唱歌的喉咙，很重要地锻炼了出来，为了音乐的喉咙，被连名字都不知道的男人弄脏，被压迫，被侵犯的感觉。那是友希那难以忍受的屈辱。总觉得自己的音乐活动被玷污了。眼泪自然而然地流了出来。我想把嘴里的异物咬碎，可是异物太大了，动不了嘴。<br>男子对友希那毫不客气，用插在嘴里的阴茎享受着嘴巴的情况。尽情享受温暖的唾液和柔软的肉感所产生的湿润，因颤抖的快感而发出低沉的喘息声。<br>“啊！不行，这个，马上就好了……”<br>让他剃了上身而呻吟的男人然后以被友希那覆盖的姿势结束了。在喉咙最深处被放射精液的友希那发出了悲鸣。感觉像是被不断流动的精液淹没啦。永不停息的射精让友希那牢牢记住了精液的味道。<br>十几秒长的射精后，男人从友希那嘴里拔出阴茎。<br>流到喉咙里的精液从友希那的食道下来，没有问题地进入了胃。<br>“那么……。接下来……”从友希那下来的男子接着把手搭在友希那的黑色裙子上。“吃这个吧……”<br>“啊！那个，那边不行！”<br>友希那制止了一个正准备放下裙子的男人的粗毛的手。但是男人用坚韧的腕力拉住了裙子。于是布裂开的声音响了。那是友希那裙子撕破的声音。露出的裙子下面出现了黑色的内裤。男人对那个也动手了。于是友希那睁开眼睛，慌慌张张地向男人挥舞双手。男子一边推开友希那纤细的手，一边灵巧地掏出内裤。友希那的小秘部露出了脸。因为有点小裂缝，所以没有长出毛类。<br>在嘴角上吊着的男子的下半身，已经重启完毕的竿带着热度。<br>“友希那酱是什么味道呢……。嗯，好期待啊……”<br>屹立的欲望的化身。男人把那个尖端，推到友希那的秘部上。粘膜彼此接触后，友希那就扑通一声跳了起来，发出了类似喘息声的小小悲鸣。<br>“拜托了，你不行……”金黄色的眼睛里含着眼泪的朋友希那恳求地喊着。<br>“没关系……，没关系……，呵呵，不痛啊……”<br>发出夹杂着吐气的浊音的男人，一边凝视着不寒而栗的友希那紧绷的脸，一边一口气把腰向前推进。竿子劈开侵入友希那，就这样刺穿了阴道。<br>坚硬狭窄的阴道被强行推开，被侵略的感觉，让友希那发出了尖锐的悲鸣。<br>“啊，好痛啊！好痛啊，好痛啊！”紧紧握住床单的友希那，仰望着天花板，睁开双眼，发出了纤细的尖叫。那是活了十几年从未经历过的剧痛。内心深处被异物侵略的感觉像电击一样在全身奔跑，身体被停止呼吸的冲击包围着。<br>“啊……。啊……”男子发出像泡在澡盆里的老人一样融化的声音。龟头感受到了电流般的微颤快感，好像很烦恼。“好舒服啊……”<br>阴道内包裹着男人的触感粘糊糊的，十分温暖。<br>“哼哼。谢谢你，友希那！你是为了叔叔才把处女留下的吧？”<br>不可能。在友希那只是绝望。我讨厌自己没有污点的重要部分，两次被如此任性地侵犯的现实。面对用嘴呼吸急促的男人，一向高尚的歌姬矜持之类的东西早就崩溃了。而且，我恨那个一直以来都很纯洁的少女之园，随心所欲地乱糟糟的男人。与杀意相似的感情烧坏了大脑，变成眼泪流到了体外。被这么丑的男人蹂躏的现在的状况，后悔得不得了。<br>沉浸在极乐世界的男人就这样毫不客气地行动，猛烈地攻击了友希那。每次友希那都流露出苦闷的声音，但那只会加速男人的蹂躏之欲。<br>男子攻打了友希那。对友希那的关怀没有碎片的腰使贪胯间，快感使身体颤抖。一想到独占了那个骄傲的歌姬友希那的阴道，就用无法比拟的快感的电击在背脊上奔跑。<br>在体内被推上的时候露出喘息的友希那不久，只是开始专心忍耐那个男人的自以为是的蹂躏。在一片绝望的大脑中，希望这一行为早日结束。<br>“啊……啊……。差不多该打了……”<br>已经到了极限的男人粗暴地抛弃了，提高了腰的动作速度。肉和肉互相碰撞的干燥的声音和男人肮脏的气息在房间里回响。友希那气喘吁吁地忍受着从腹底冲上来的强烈不协调感。<br>“喂，好球……，什么……”<br>“嗯！”<br>没有男人回答友希那的问号。男子用力一把，腰的动作不断加快，把自己推向了快感的顶峰。<br>“呜呜……！”<br>不久，男人发出低沉的呻吟，到达了快感的尽头。走到友希那的最深处，在那里腰部颤抖着，吐出了性欲。<br>“啊……！这个，这个……！”<br>在友希那的体内蔓延，热的冲动。这是无法挽回的东西，即使是缺乏性知识的友希那也察觉到了。一边睁着双眼一边感受，阴道中迸发出的热气。在友希那的脑海中奔跑着的“怀孕”两个字。这是一个让至今为止的一切崩溃的同时，也让今后的一切崩溃的惊人。<br>一边微微颤抖一边紧紧地坐在友希那身上的男人，至今仍处于快感的顶点。脑内所有的思考都被弹飞，只能沉醉于释放出的性欲的快感。<br>几秒钟的余韵流逝了。友希那沉默着，一边忍受着在肚子的位置上蠢动的东西，一边调整着荒芜的呼吸。脸颊被泪水沾湿了。于是男子慢慢地被友希那遮盖住了。友希那以为他又要被吻了，可是男子伸长的舌尖却抚摸着友希那的脸颊。温热的舌头在脸颊上添了一块肉，舔去了眼泪。<br>在友希那的脸颊上用唾液咕嘟咕嘟的男人接着动了动腰，从友希那里面拔出了竿。被精液浸湿的阴茎已经完全枯萎了。<br>“嗯……。哎呀，不愧是高中生娜卡啊……叔叔，心情非常好。”<br>友希那呆呆地看着在视野中令人毛骨悚然地笑着的男人的脸。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      <categories>
          
          <category> 强健凑有希那系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> R18 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凑有希那Guro</title>
      <link href="/posts/75caf58c/"/>
      <url>/posts/75caf58c/</url>
      
        <content type="html"><![CDATA[<h1 id="凑有希那guro">凑有希那Guro</h1><p>那条小巷里充满了黑夜。<br>与世界本身完全分离了。被无视的感觉，皮肤凝固了。虽然很冷很冷，但是那样就好了。在想从人的眼睛里隐藏的现在的状况下，这个间隙反而是救济。<br>“没关系，不是吗……”<br>我走到小巷的深处，回头看了看，窥视着带着的凑友希那的脸。<br>“头有点……”<br>“痛吗？”<br>“不，总觉得团团转……”<br>友希那眼睑用力地害怕着。非常小，是颤抖的语气。<br>“在这里先冷静下来吧。”<br>「嗯，拜托了……」<br>沉重的声音持续着。好像是被明确的惊异逼到了，充满了吸引人的气氛。<br>友希那，只是用那双手紧紧地牵着我的右手。长长美丽的淡紫色，将小小的表情从上面塞住，但是从那里漏出的低沉的声音和气息却很淡薄，从平时那种刚强的态度来看，完全无法想象，很细。<br>“我想这里的话人也不会来的。没关系。”<br>“太感谢了……”<br>即使我尽可能地确认安全，友希那也只是脸朝下呆呆地看着，晚了几秒，才像断了线的人偶一样，用发角的动作微微地颤抖。<br>“稍微休息一下，马上回家吧。”<br>「嗯，拜托了……」<br>真的是和平时不同的态度。声音和气氛都不一样。一看就着急。总觉得痒。倒不如说我变得不安了。<br>我盯着友希那的对面。以保护孩子的父母的狮子的心情确认了远处，只看到了一点人们往来的街道风景。<br>他们的民众一点也不关心我们。<br>这样看着马路，胸部附近突然发烧了。<br>真面目当然是友希那。<br>“对不起。”<br>友希那在我的心中漏出了声音。艳丽的长发凌乱啦。在我的衬衫上杂乱无章地旋转着，以一种完全不平静的态度摇晃着。<br>“对不起……”<br>友希那的颤抖在我身上传播。<br>“没关系的。”<br>尽管如此，我还是用声音包容了朋友希那，温柔地抱住了他的背。友希那显眼的两肩微微地呻吟着。我摩了友希那。她那罕见的软弱，像是直接解开似的抚摸着旋转着温暖着。<br>“真的，没关系。你看，这样的话，我觉得彼此都是一样的。是啊，所以没关系。”<br>友希那什么也没回答。只是在我心中动动脑子。额头的硬度一下子冲了进来。我抱着友希那的意识继续摩擦着他的后背。友希那的双手抓住我的手臂不放开。倒不如说是把重心放在我面前的状态。<br>“对不起……”<br>身体内部的痛苦，总算是拼命地欺骗着。<br>“好的。……呵呵。”<br>我，用纺歌一样的心情触摸了友希那的头部。友希那的鼻子嘎吱作响。衬衫胸板的位置湿了。真的，好像有什么东西迎来了极限。<br>“……看起来不错。”<br>友希那在自己的口中融化了声音。<br>「咦？怎么了？」<br>“是的。”<br>友希那用明确的声音喊道。总之，我理解了只想传达状况。我在有什么反应之前把手伸进了口袋。但是没有礼仪袋之类的东西。取而代之的是出来的只是塑料袋。<br>“那么，暂且到此为止吧——”我打开袋子，友希那什么也没说，把脸掉在里面。<br>友希那的喉咙因为不可能的下流而发抖。我不管不顾地整理了袋子。友希那把大的东西分几次吐出来。这是一种崩溃的、掠过的、消耗着的声音。小小的后背一次又一次地跳动，袋子的底部被珍贵的淋湿，变得沉重而温暖。<br>不久，友希那平静了下来。从袋子里抬起头来。半开着的嘴的周围，像补充完水分的狗一样湿润着。<br>“对不起，那个。”<br>友希那迅速移开视线，在那前方喘不过气来。肩膀周围的妖沟，更加猥亵地变动了。<br>“先开口——”我正要拿出纸巾的瞬间，友希那再次躲到袋子里避难。头发垂了下来，成了围着我的袋子看的样子。<br>不知为什嚒，我腰更用力地准备了。马上友希那的脖子周围凹陷到内侧，浊音响起。<br>“好啊，别吐。”<br>就像是强行挤出杂质一样。只有珍贵的喉咙或者胃本身磨损的浊点。垂下来的东西像水一样，哗啦哗啦地胡闹着，但最后还是紧紧地堆积在底部。<br>我在不安中。友希那抓住了我的双臂，在袋子周围摇曳的淡紫色反而成了从袋子里溢出的样子，摇晃着。那个朋友从希那飞出的声音太悲痛了，非常远离人。恐怕是只有我听的友希那的下流。那污渍在这条小巷里回响着消失了。<br>“啊，怎么了……”<br>我，一方面热烈地旁观着友希那的事。在这片昏暗中，友希那劈里啪啦的浑浊，总觉得很鲜明，总觉得很漂亮，脑子里完全是另一个不可思议的部分，非常热闹。<br>过了一会儿，友希那的胃和喉咙恢复了平静。友希那像是叮嘱般静止了5秒左右，但并没有从嘴里吐出新的呕吐物，终于安全地慎重起来了。<br>“没事吧？”<br>我问了低着头的朋友希那。<br>“嗯。我想已经没有什么了……”友希那笨拙地移动着湿润的嘴，移开了视线。「那个，真的很抱歉。」<br>“没关系，要是能冷静下来就好了。”<br>我摇晃着身体破脸了。<br>无意中让他鼻子一碰，发现下面有异质的臭味。<br>就像以此为信号一样，我心中有点颠倒的感觉朝着袋子走去。<br>袋子的重心完全固定在下侧。全部都是友希那的呕吐物。袋子很茂盛。真的，真的，只有友希那的格罗。盖洛的重量全部压在我的双手上，比如轻轻摇晃一下，得到了袋子本身被向下拉的愉快。<br>友希那吐泻的存在，在我心中更加鲜明地散发着香味。<br>“嘿嘿……”<br>我恍惚地浮着。我在脸上都感受到了友希那呕吐物的烟味。在友希那里面的活着，感觉就像是直接接触到了一样。那就像是自慰般的心跳，我无论如何都要跳到友希那。<br>“喂，那个，能给我擦点什么吗？”<br>“啊，啊，对不起。”<br>我慌忙拿出纸巾递给友希那。<br>友希那用颤抖的手接过的脸颊看起来已经成熟了，但由于夜晚的黑暗，无法正确地看到。<br>“……出了很多呢。”<br>“诶？”<br>一边恋慕着擦着嘴的友希那的胃的内部，我再次开始观察友希那的格罗。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> 小说 </tag>
            
            <tag> R18G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新强健凑有希那</title>
      <link href="/posts/269339ce/"/>
      <url>/posts/269339ce/</url>
      
        <content type="html"><![CDATA[<h1 id="新强健凑有希那">新强健凑有希那</h1><p>打开那扇门的我，迅速地环视了一下宽敞的单间。那目光是野生的，顽强的，而且充满了性欲，甚至连自己都能自觉。<br>目标对象很快就找到啦。<br>在室内中央不可思议地凝视着这边的她，正是我追求的只有我的女神凑友希那。她的脸上浮现出不安的颜色，因害怕而颤抖的双眼凝视着我的全身。<br>“你……，为什么——”<br>友希那的眼睛马上就到了我的下半身。<br>当然啦。因为现在的我，是什么布片也没穿的完全的裸体。<br>我侵入了友希那的自己的房间。那一瞬间接触到肌肤的空气感发生了变化。那就是所谓的气场。在友希那的房间里，友希那自己作为气氛酿造出的迷惑的空气感。我无视愕然地瞪着我的友希那，闭上双眼做了鼻子呼吸。这是为了将友希那房间迷人的空气，将其气场本身吸收到体内，保存在大脑中。<br>（啊……太棒了！这就是友希那的香味！我一定是为了这一天而出生的……）<br>结束了拘泥的仪式的我逼近了女神。今天的朋友希那穿着白衬衫和黑短裤。非常适合常夏的现在。当然也很适合友希那玫瑰般美丽的容貌。不是裙子，而是裤子，感觉很男孩子气，感觉和平时女王一样的气氛又不一样。<br>“好可爱啊，友希那。”<br>我不禁自暴自弃。于是友希那退后几步，把手伸向桌上的智能手机。<br>不行。做那样的事别人介入了……。<br>我在友希那拿着智能手机之前抱住了她。友希那一边悲鸣一边反抗，不过，对男人的我来说没有抱着不管好还是坏都只关心音乐的坚定信念的现役女高中生歌姬的腕力等。<br>“不，住手！住手，住手！”<br>把吵闹的朋友希那推倒在附近的床上。我确信松软的床垫一定是为了我们的幸运。友希那张开双臂想要逃离我，但还是没有那个力量。我一边用一只手按住她，一边用另一只手放下裤子。一滑下来就看到了友希那的内裤。今天是可爱气氛的桃色。从平时冷静沉着的性格来看，颜色有点不协调，但我认为这种分歧的气氛才是凑友希那的乐趣。<br>“啊，等等！那可不行！不行！”<br>无视友希那的制止，我把手指挂在内裤上简单地放下了。<br>于是宝物已经出现了。这比什么都重要，是友希那女性最重要的象征，也是今后我自己细细品味的最高级的肉洞。<br>“……好可爱。”<br>友希那的裂缝很小。在胯间的中心稍微存在着。为了弥补那贫瘠的阴道口不足的尊严，上面有和头发一样颜色的灌木丛。这是一片茂密的淡紫色森林地带。我忍不住把鼻尖塞进那里吸引啦。友希那胯间蒸腾的香味侵入体内，传到了大脑。那是令人头晕的强烈快感和浓厚的快感。再次做鼻子呼吸的话友希那的悲鸣在上部轰鸣了。我慢慢地抬起头，看到了提心吊胆的她。<br>“不用那么吃惊，我和你的关系吧？”<br>“我不知道！”友希那摇了摇头。“我不认识你！你去哪里！”<br>“呵呵，真难受啊。还好。”<br>我完全上了床，握住了自己的竿。鱼竿已经直立到极限，圆胖的尖端颤动着。将我的性欲原封不动地具体化了的黑色男人根，让他挤进了友希那的小裂缝。<br>“咦？什么——”<br>友希那的生殖器还不发达。我用牡丹色的龟头的尖端玩弄了那样的她不成熟的阴道口。于是友希那发出了小小的悲鸣。让纤细的身躯颤动着，仿佛被迫近的我这惊异所震撼。连那样的样子都很可爱。<br>“去吧，友希那……”<br>我像强行贯彻友希那蜷曲的情绪一样，一口气把腰伸到了前面。于是坚硬的阴茎推开了友希那小小的秘裂，打破了像膜一样的东西之后，一直侵入到里面。<br>“啊，好痛啊！？什么啊，这是什么啊，别这样……”<br>友希那拼命地拍打着我的身体，发出了悲鸣。当然那个腕力等于没有，我坚强的身体只是稍微颤抖了一下。<br>友希那的阴道并没有被淋湿，但我的竿就像是确认了神秘的肉洞的形状一样，像探索一样前进，马上一下子到达了最深处。<br>“进来了……！去友希那的娜卡！完全进去了！”<br>那是一种无法替代的甜美触感。朋友希那是我唯一最爱的少女的圣域，是任性地插队的极乐的感觉。比任何违背道德的行为都有情趣。肉厚的阴道吸附在竿子上，不停流淌的泥泞快乐流遍全身，治愈着大脑。我确信我就是为了这种感觉而活下来的。<br>“拔出来吧！这样的……真讨厌！”<br>“呵呵，好舒服啊，友希那……”<br>柔韧的友希那的阴道，每次动腰都会把我的竿捋起来。虽然是无间隙地存在的肉的褶子，但却平滑地缠绕在我的象征上不离开。<br>“哇，会更快的。”<br>把充满喜悦的笑容转向友希那之后，我更加加快了腰的速度。<br>“不，别这样！好痛啊，好痛啊……”<br>每当鱼竿在阴道中蠢蠢欲动时，友希那发出苦闷的娇声，泪花四溅。我觉得那个很舒服。友希那最重要的部分，被友希那本人拒绝的同时崩溃，贪婪地蹂躏的这种感觉让人受不了，心情很好。我按照自己燃烧的性欲加速了腰。友希那的阴道咯吱咯吱地削着。我有一种马上从胯间附近涌上来的冲动。那个顽强的欲望马上跑上竿，同时我在脑中感受到了想给这个朋友希那打上作为自己生命的印记的欲望。那几乎是野心。在自己的内心深处熊熊燃烧，是什么都无法超越的野心。这个，在眼前的绝品的雌的阴道全部吐出，强烈地妄想肉体的记忆和精神的记忆两方面让我这个异物永远登场。并且那个妄想马上与灼热的性欲缠绕，竿到达了更加猛烈的境地。<br>“友希那！出来吧！”<br>“喂，什么——”<br>宣言的同时也和友希那坐在了一起。无视友希那的悲鸣，腰用力了。于是，从侵入阴道最深处的男人根的尖端，我的豪胆的欲望激烈地爆炸了。那无疑是超越了友希那阴道的神秘飞散，接触到了友希那生命的核心。<br>“啊……哦，好厉害……”<br>“啊，等等，这是什么……。你做了什么……”<br>友希那因嘶哑的声音而感到困惑，我却沉浸在从下半身慢慢揉起的细微回味中。那里没有秩序，有的只是一味持续的我的快感的波浪。现在的我，触摸到了友希那作为雌性的最深处，被白浊弄脏了，尽管如此，还是燃起了更大的色欲。<br>“友希那，不行……我，只有一次是不能满足的。”<br>“什么，你在说什么……？你——”<br>“啊啊啊啊！友希那！”<br>我刚吐露了性欲又动了腰。阴道里的鱼竿一点也没有干枯。<br>“我喜欢你！雪啊，我喜欢你！我爱你！我们结婚吧！友希那！友希那！”<br>“别开玩笑了！我才不认识你呢！”<br>不仅是阴道被强行推开，更是陷入其中的异物酿造出更激烈的味道，友希那再次发出痛苦的声音。那已经是尖叫了。完全拜倒在我的男根上，败北的样子很可爱。与平时的音乐舞台上的高贵而强大的气氛完全不同的是她的混乱。对于这种不协调、不一致的发现，我不由得产生了接吻的欲望。<br>“友希那，kiss吧……”<br>“啊？不可能吧？这样的，快点拔出来吧！”<br>友希那只有语调有着平时的强硬的气氛，不过，那个呼吸混乱，更加下面的阴道叼着我的竿。我对那样的朋友希那毫不客气地落下了嘴。很快友希那柔软的嘴唇触碰到了。我迅速地吃了那个。<br>“嗯！哎呀，别这样……”<br>“友希那！”<br>我气势汹汹地把舌头伸到了友希那的嘴里。友希那的嘴很温暖。和氮又不一样，有湿润的柔软。只需舔友希那的舌头、吸唾液，鱼竿就达到了更高的境界。在牙龈上爬行，为了确认齿列的形状而进行了探索。<br>满足了友希那的口内的我放开了嘴。朋友希那完全被我没有休息的舌头吓傻了。由于来自上下的攻击，体力被夺走，之后似乎只能一动不动地忍受屈辱的过去。我抱住了那样的朋友希那。在光滑的背上转动双臂，靠近身体和身体，马上鼻孔里弥漫着甜甜的香味。那是友希那的体臭。我用鼻子吸满了眼睛，把它们吸了下来。她那到达大脑的香味，是让我的腰更加加速的恰到好处的燃料。<br>“啊！友希那！友希那！”<br>我连续坐在友希那的身体上。皮肤和皮肤重叠的声音响起，阴道中那个皱折执拗地摩擦着竿。那正是肯定竿的存在和从那里放出的生命本身的蠢蠢欲动。友希那虽然在语言上那么拒绝，但作为雌性的功能是恳求我的礼物。我想如果是那样的话，就必须给予特别的东西。我真的想把所有的东西都种在友希那的核里，把我这个雄性的记忆和体感擦到即使擦了也不会消失的程度。裤裆已经到极限了。我再次吻了友希那。友希那已经没有任何抵抗了。我为了那件好事用舌头在嘴里跑来跑去。迅速地舔遍了所有的东西，把自己的唾液放在土特产上，一口气坐在一起。<br>“呜呜呜呜！”<br>从颤动的竿子的尖端，放射出粘稠的欲望。它浸湿了友希那的阴道，并散落在其深处的神域中固定下来，向友希那本人展示了它的存在感。被释放的我的白浊像渗透在友希那中一样融化，作为友希那身体的一部分，应该添加了今后所有的人生。对我来说，这是一种莫大的喜悦，可爱地拥抱着筋疲力尽的朋友希那，抚摸着她的头。<br>“友希那，我爱你，友希那……”<br>我一边嘟囔着，一边慢慢地舔着眼睛空虚的友希那脸颊上流淌的透明的眼泪。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      <categories>
          
          <category> 强健凑有希那系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> R18 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无知觉凑有希那</title>
      <link href="/posts/a0fad1b7/"/>
      <url>/posts/a0fad1b7/</url>
      
        <content type="html"><![CDATA[<h1 id="无知觉凑有希那">无知觉凑有希那</h1><p>音乐家凑友希那按照指定进入了酒店。<br>这是我人生中第一次真正利用这个设施。总觉得皮肤得到了与其他设施划清界限的异质空气。因为只有一个人的感觉也很久了，所以脚浮起来的感觉更浓了，但是像往常一样沉着地走向了接待柜台。<br>给个子高的女性工作人员发了邮件对方的名字，特别是在没有任何确认和填写文件的情况下，一把钥匙被紧紧地放在了那里。这是一把连指纹都能浮起来的冰冷的金色大钥匙。按照向导使用了电梯。<br>位于二十六层的单间内部无人。宽敞，中央只有床。两个人或者更多的人躺下也有富余的大小。从雪白的床单中，我感受到了超越高级感的无机质的神气。<br>“到底是什么……”<br>友希那一边坐在床上一边自言自语。环顾乏味的室内，每次淡紫色的长发都会摇晃。因为设施的气氛太庄严又寂静，所以怎么也没有现实感。友希那揉了揉坐着的床。这是一种向人类肌肤献媚的质感。没想到能在这种地方谈工作。友希那再次看了看室内的天花板和角落。头发和眼睛迅速地移动了。我深深地体验到了时间前进的缓慢。<br>（太晚了……。叫他出来竟然迟到了……）<br>友希那吐出了蓝色的气息。事前调查的时候抱了的轻的感觉就那样作为实际体验降落着。<br>几天前收到的邮件的对方是男性。正文几乎没有浪费。房间里只写着希望友希那一个人来。和谁一起去房间就不用说了，也禁止和谁说去房间的事。从文章的开头和最后强调的地方来看，我想只有这两点是真的希望能遵守的吧。<br>从立场上可以与各种各样的事务所合作，从那里到达友希那安排了接触的事在邮件内被订了。虽然被道歉说唐突很抱歉，但计划是强行决定的，突然用尖锐的语言表达出来，深深地感受到了男性的豪胆。<br>因为是特意强行进行的，所以预想是相应的认真的事情。完全不认识的陌生人，而且是男性，说实话并不感兴趣，但考虑到后来调查发现的男性身份，友希那独自推开了还不习惯的酒店门。<br>对方的男性是长年居住在这个专业音乐附近的人。不是走在前面表演的艺术家类型，而是在后面计划艺术家和乐队的所谓制片人的立场的人。<br>第一次看到名字的时候我以为是什么错误。理由是这个男性和自己的接触点不太找到。搜索名字也几乎没有意义。除了某位泰斗音乐制作人是亲生父亲这一事实以外，没有出现引人注目的信息。那个父亲好像有过好几次获奖的经历，像这样非常伟大的伟业与自己的父亲相比也毫不逊色。与此相对，那件事的男性什么都没有。虽然已经有了几十年的经历，但似乎还没有被称赞的伟业和被指责的失态。<br>尽管如此友希那还是认为这是机会。我想不管是怎样的对方，如果作为正经的工作人安排了接触利益发生。也就是说，这是我们作为职业选手到达更高位置的重要机会。那是绝对应该成为东西的案件，所以友希那调查了邮件中指定的去这家酒店的方法。<br>（什么时候才能来呢……）<br>呆呆地盯着闪烁的灯光吐气，房间的门终于打开了。<br>好不容易习惯了松软的床的友希那在上面用力地看着门。<br>“啊。”<br>一个男人站着。<br>“晚上好。”<br>友希那当场站起来轻轻行了一礼。<br>“啊，晚上好。呵呵，凑友希那。”<br>男人一边发出明亮的声音一边靠近友希那，掉到了床上。床单歪斜了，床垫沉了下来。友希那也温柔地坐在那旁边。<br>“不，对不起，有点晚了。”<br>“没关系。”<br>友希那用锐利的目光压着男人。近距离看的男人和预想的一样，气氛很矮小。黑发很短，额头看起来很圆。很明显，高档西装也反而很滑稽。<br>“哎呀，喂，喂，我没有工作，哈哈……”<br>男子和声音一起，肚子也软绵绵的。其特征是齿列发黄。从嘴角朝上时的表情中意识到了野生猴子。<br>“真是够呛啊。那么，什么是必要条件呢？”<br>“啊——”<br>男子伸出手臂挡住友希那。粗壮的手臂迫近友希那无法隐藏的稚嫩触到了肩膀。<br>“嗯……”<br>我感觉我的头发都竖起来啦。友希那呆呆地看着自己的肩膀。男人的大赤手空拳大摇大摆地动了起来。这是从衣服上确认肩膀轮廓的动作。不知道为什么感觉黏糊糊的。<br>“嗯？怎么了，朋友希那。”<br>用男人窥视的情绪逼近了友希那。那个泥泞侵蚀了身体的核心，揉着内脏器官。太可怕了，背肌因为讨厌的质感而湿了。<br>“不，不。”<br>在男子逼近之前，友希那使出赤手空拳使身体后退。<br>“大丈夫？”<br>“没问题。比起那个——”<br>“呀，呵呵。”男子突然弹了起来。翘着背哈哈大笑。“能和友希那约好，我很高兴。”<br>“……偶然有空。”<br>友希那放小了。被不可思议的嘈杂的感觉所震撼。漂浮在室内的不透明的气氛渗透到喉咙里，令人窒息。<br>“因为没有时间，所以请简短地说出来。”<br>友希那用力喉咙。我相信，自己在经历了各种各样的体验之后，顺理成章地完成了应该做的事情，所以会有相应的力量。<br>“哈哈，友希那已经是很厉害的乐队女孩了。音乐，做得很好哦。”<br>“当然啦。”友希那坚定地回答了男子松弛的声音。一下子就把力气放在肚子上了。“我们相信自己的音乐。正因为是这样的我们，才能来到这里。而且我们今后也会——”<br>“啊，这样啊。怎么说呢，先冷静一下吧，友希那。嘿嘿。”<br>“嗯，嗯。”<br>虽然没有拜托，但却感觉很细心，无法平静下来。原本我们是平等的工作关系，不需要那样肤浅的处理。<br>“然后——”<br>“呵呵，友希那……”<br>男子一边歪着头，一边把手伸向友希那的头，抚摸着头顶。<br>就在这时，友希那意识到了背脊上的东西。全身一齐鼓起，关节紧紧地缩了起来。突然觉得男人就在自己精神上的附近，心里很不舒服。<br>“不，别这样。”<br>友希那反射性地弹了弹男人的手臂。<br>“哈哈，讨厌吗？”<br>“……我没兴趣。”<br>友希那低沉而直截了当地放了出去。<br>“是吗？太可惜了。”<br>“……没关系，请停下来。”<br>“啊，那就再靠近一点吧。嘿嘿。”<br>男人一边笑一边接近友希那。肩膀和肩膀互相摩擦地陷了进去。<br>“呵呵，和那个凑友希那离得这么近。啊，果然我是——”<br>“那个。”友希那若无其事地和男人拉开距离，迅速开口。这是一种强烈的语气牵制的情绪。“事情到底是什么？”<br>“啊，啊。嘛，有点……”<br>男人堂堂正正地缩短了和友希那的空距离。从肥胖的身体发出的风压一样的东西触摸着友希那的脸的皮肤。这是一种特别热情的亲近感。我觉得如果放松的话，就能窥视到自己内心极其私人的部分。自然而然地警戒心就加强了。<br>“怎么说呢，我和喵喵而已。”<br>“喵，喵……？！”<br>友希那脑细胞的少女突然反应过来。<br>“喵喵……”<br>至今为止接触过的猫们的脸一齐涌出来，胸的中心呆呆地蒸着。<br>“啊，你知道喵喵吗？友希那。”<br>“嗯，好吧，我没什么兴趣。”友希那抓住快要闹起来的情绪的尾巴，发出了僵硬的声音。<br>“是吗？但是在这个世界上，也不会做这样的事吧？所以友希那也回答了这次的吧？”<br>友希那无视男人，叫了一声。与其说是这样，还不如说没有听到男人排气的声音。猫咪在脑海中回响。脑海中映出了各种各样的猫自由自在地放松的景象。<br>“咦，喂，友希那？”<br>这是一幅甜美的景象。无疑是这个世界的乐园。<br>“那个，所谓的喵喵，具体是怎么回事呢！？”<br>友希那火辣地照着脸颊。全身一下子闷热起来。我意识到皮肤会肥大两圈。<br>“嗯。”<br>但是男人看了看天花板。就这样一动不动地转动脸，再次凝视友希那的脸。<br>“友希那是什么杯子？”<br>男人的语气很坦然。<br>“是的……？”友希那感觉是从正面撞到那个男人的铁壁而崩溃的。“比起那个，喵喵是什么——”<br>“不，所以呢，友希那酱是几杯？奶啊，有多大？”<br>男人窥视着友希那。<br>“我不知道。”友希那低声回答。我找了梦中的猫咪，但是哪里都没有了。我不知道自己乳房的大小。<br>「咦，真的吗？你不知道吗？」<br>“当然了吧？”友希那用清晰的声音回答。“音乐需要胸部大小的信息吗？”<br>“啊，确实。”。“那么，我来给你量吧？”<br>“哈？”友希那睁大了眼睛。“你……？”<br>这是一个莫名其妙的提案。我没能理解为什么会这样。<br>“嗯嗯。我啊，就是这嚒擅长的。”<br>男人是颤抖的声音。脸颊高扬，左右两边都鼓起来了。那张脸迅速地接近了友希那。散发着独特的酸味。<br>“怎么样？做一次吧？”<br>“讨厌。对不起，我真的没有兴趣。”<br>友希那的情绪已经冷却了，非常尖锐。<br>“是吗？可以吗？交到男朋友的时候，不能申报。”<br>“没有。”友希那用力地往肚子里一用力。“我不会出现这样的对象。”<br>“是啊。”。“那么，月经呢？”<br>友希那思考着。虽然是听过的单词，但是忘记了那个具体是什么样的。“……那是什么呢？”<br>声音很小。总觉得不想让这个男人知道无知。<br>“这样啊。啊，是这样啊。”<br>男子不知为何微微地摇晃着。走进这里向友希那展示的脸中最富于喜悦。<br>“我不知道什么是快乐的。”<br>“友希那啊。嘿嘿，嘿嘿……”<br>友希那静静地放着鼻息平静下来，但是意识到了在男人面前暴跳如雷的羞耻。我觉得男人好像把什么非常不道德的感情转向了自己。我感觉自己不知道的自己被随便揭穿了。<br>“啊，那嚒，友希那酱——”<br>“那个，可以吗？”<br>对于男人缓慢的声音，友希那投去了恰如其分的质感。男人的脸停了下来。友希那就那样注视着男人的眼睛。<br>“差不多该进入正题了，真是太感谢了。”<br>友希那用责备的心情逼迫着男人柔软的情绪。这是一种母亲的质感，她控制着一直开玩笑的男孩。<br>“好的，等一下……”<br>男子从友希那说起脸，擦了擦裤兜。我好像在准备说明工作内容什么的。一下子叹了口气。终于意识到前进的喜悦和惊讶。猥亵愚俗的闲谈，我已经想请你原谅了。<br>“呵呵，友希那看这边。”<br>男人回来的同时，朋友希那的嘴角接触到了白布。<br>“嗯——”<br>友希那反射性地想要逃跑。虽然什么都不知道，但总之作为生物是很危险的。但是后脑勺被男人抓住了。所以友希那在布里呼吸了。一切都被强制了。惊慌的友希那被埋没着反复呼吸。我把浸透在布里的神秘液体吸了出来。<br>“嗯，嗯”身体没有力气了。四肢变成了普通的肉块。大脑变冷了。连接自己的身体和自己的意思的什么东西像融化一样中断了。<br>“呼呼”<br>友希那只盯着男人的脸。<br>那目光充满了明确而浓厚的敌意。虽然是愚俗，但却露出了生动的光辉。<br>果然没想到是同一个人。<br>友希那恢复了意识。<br>很混乱。就像是从耳朵里注入了温水一样。虽然接触到自己的所有轮廓都很模糊，但几秒钟后大脑就东山再起，皮肤凝结了。友希那一边吸着空气一边很有气势地起床了。意识早就震撼啦。在那柔软的床上。<br>「咦？」<br>友希那在那里明白了自己是全裸的。就在这时，童女般的羞耻慢慢地抬起来，大脑成熟了。心跳得厉害，直轰到喉咙。<br>友希那一边压抑着粗气一边找衣服。室内的气氛没有变化，很宽敞。但是没有衣服。哪里都找不到那种气质和夸张气氛的连衣裙。所有的可能性都浮现出来消失了。总之，我觉得必须隐藏自己的秘密，所以想进一步活动身体。<br>“啊，友希那起床了。”<br>“啊，你——”<br>友希那是个赤裸裸的少女，反应很快喉咙就停止了。<br>“怎么了？”<br>男人变傻了。友希那的皮肤更加沉重僵硬。飞出的情绪失去了去处，陷入僵局。<br>“为什么要脱呢……”<br>友希那在巨大的身体前终于发出了颤抖的声音。<br>“啊，那是为了和友希那一起喵喵吧。”<br>“……你在说什么？”<br>男人的每一个声音都很沉重。感觉像是大脑被挖出来了。除了眼前的裸体以外，所有的景象都像水面一样摇曳着。<br>“啊，回去了。”<br>“喂，等一下。”<br>男人站在膝盖上逼近友希那，触摸到了大腿。友希那的皮肤跳了起来。就像无数的蚯蚓在爬一样。<br>“放开我。”<br>友希那很坚强。但是肌肉没有动。<br>“不行啊。因为是喵喵吧？你会做的吧？”<br>男人更加接近了。肉本身蠢蠢欲动的影子逼近了。低劣而从容的笑容想要融入友希那的情绪。<br>“嗯，好雪啊……”<br>巨大的危机感迫在眉睫，连呼吸都变得困难了。<br>“有点不行……”友希那凝视着男人的脸，吐出了声音。有像拼命掩饰的女孩一样的痉挛。“啊，停下来！讨厌”<br>但是男人没有停止。<br>当然啦。<br>“不，别这样。有点——”<br>现在的友希那完全没有约束歌姬的其他优势。友希那只是一个少女，处于困境中。无力无力。裸露的水灵的肌肤不可能寄宿着作为专业音乐家的威严。<br>“好啊。”<br>男人唐突潮湿的声音使友希那波涛汹涌。<br>“喂，警察！”<br>像歌手一样的尖叫震动了男人的赤裸。<br>“喂？”<br>男子一边起身，一边压迫着友希那。到刚才为止的温厚已经哪里都没有香了。<br>“是啊，是啊。我会叫警察的。全部都会起诉的。这样的话，怎么可能被原谅呢？！”<br>友希那在声音的压力下努力回避男人。<br>“嗯~”<br>“明白了吧？！快点，退后……！”<br>友希那用强烈的眼神制止了可疑者。是竭尽全力的抵抗。牙齿排得紧紧的。这只是一种连道理都不通的明显的异常行为。完全没有正当性。完全没有权限。现在的男人只是愚蠢而彻底的下等。这就是暴举本身。无论从哪里怎么想都是不讲理的。没有理由去顺从那些蛮不讲理的人。<br>“嗯。”<br>友希那呻吟着。思考和感觉都消失了，脸上迸发出了热度。<br>那是一种喉咙被脚后跟压碎的小猫的声音。鼻子的深处突然倒立着。眼睛被热和麻痹侵袭了。<br>“是……”<br>友希那睁大了眼睑。圆圆的瞳孔静止着。鼻子周围非常成熟。莫名其妙。松弛的下巴没有恢复。胸部的肉糜反复起伏。喉咙紧绷，连续发出短促的悲鸣。<br>「咦？什么？咦？」<br>脸的中心一直都有硬的东西。鼻梁中嵌有铁块，只有那部分特别热。是不知道的质感。<br>“如果你不想挨打，那就老实一点。”<br>眼前的男人握拳对友希那放了出去。<br>“啊，啊，啊。”<br>“不要反抗。”<br>比起僵硬的声音，意识更转向了充满热情的拳头。<br>“你知道吧，友希那。”<br>男人微微一歪。不是人类的身份不明的什么东西。<br>“啊，啊。嗯……”<br>嘴角抽搐着。<br>喉咙随着本能而颤抖。<br>“啊，那就再来一枪——”<br>“喂！”喉咙用力地换了一下，但强行挤出了空气。“对不起。”<br>恐怖、愤怒和后悔的颜色一退色，就在脸上消失了，最后只剩下作为生物的冰冷的无力。<br>“对不起……”<br>平时的大声完全消沉了。感觉像是被赶在房间冰冷的角落里。<br>“对不起。”<br>“哈哈，被打了一拳就这样了。友希那也是女人啊。”<br>男人油腻的声音舔舐着友希那的肌肤。<br>“我该做什么呢？”<br>友希那恳求道。突然无力了。肌肉力量、意志、矜持、威严，全部都被友希那吓到了，很快就不在了。已经没有沉静下来的音乐家了。只是脱壳的朋友希那附近有一个胖乎乎的男人。刚意识到肉达磨，松弛的眼睛就自己发热了。<br>“咦，友希那，你在哭吗？”<br>「咦……」<br>由于男人的指责，友希那大吃一惊。接着意识到自己的眼睛里浮现出湿润、热和麻痹。很快脑细胞中的像芯一样的东西崩溃，视野扭曲，痰涌出了。<br>“那我就哭了，就这样哭了。”<br>男人的脸近在咫尺。这是一种安慰女儿的父亲的态度。友希那从那目光中嗖嗖地逃走了。想要隐藏的弱点被准确地戳到的感觉很痒。脸颊和眼角积存的泪水滴滴答答地流着，弄湿了侧脸。男人的双臂抓住了友希那的头部。友希那被引导到了上面。下一个瞬间，男人粗壮的嘴唇逼近，全部被覆盖了。<br>“嗯——”<br>呼吸被堵住，防卫意识突然静止下来。<br>凑友希那是主唱。<br>我曾经喜欢唱歌。<br>唱歌才是自己应该做的事。<br>所以唱了。所以每天坚持。没有休息。不可能休息。反复练习。我相信歌声和音乐。怀着骄傲一味地精进。以只有自己的高度为目标继续表现声音。用自己的喉咙演奏的声音冲了过去。用自己开的口做了一条路。<br>对于成为职业选手的友希那来说，喉咙和嘴确实是商业工具。<br>但是当然也有比生意道具更重要的想法。作为音乐家，自己的人生中喉咙和嘴是不可缺少的。是重要的存在。这是一个珍贵而命运的部位。<br>“喂”<br>音乐家友希那强行和男人接吻。<br>被男人抓住了头部。我没能逃掉。男子的粗胳膊和五指将头顶的淡紫色毛发拨开固定着。<br>嘴边有一种从未感受到的不祥。柔软得粘稠。雄性自由自在地蠢动着友希那的肉厚。像充满朝气的蛞蝓一样潮湿。<br>“嗯——”<br>友希那拼命地活动着擦在雪白床单上的四肢。几乎是反射性的。背上脉动着，肚子抽搐着。但是，因为满身是汗的异质发热而受到了对抗。是个暴露本性的男人。是蒸过的污臭的肉达磨。<br>“嗯哼。嗯。嗯——”<br>男女的四肢和身体的起伏在床上咬合着。<br>巨大的身躯把纤细的友希那完全推到了床上。<br>接吻对友希那来说是非常容易理解的象征。说起友希那能联想到的男女浓厚的行为就是接吻。<br>“嗯，嗯，嗯，嗯。”<br>这样的朋友希那的第一次接吻就是这个男人。是这样的男人。作为少女的所有珍贵的东西都被男人占领了。由于愤怒，身体变成了火达磨。<br>被堵住的嘴角接触到了新的质感。<br>“啊？！”<br>友希那停滞不前了。背部发达得刺骨。心跳停止，胸部快要破裂了。虽然四肢呻吟，但还是没能抵抗。眼角积了眼泪。很快就哗啦哗啦地流了下来。<br>嘴里塞满了男人不讲理的肉。友希那拼命地从荷花和鼻子里放出气息。感觉连喉咙都被侵蚀了。<br>“嗯，嗯。嗯，嗯，嗯。”<br>男人的舌头像触手一样毒辣的蠕动。它彻底爬行在雌性湿度的源头上。连奥齿和牙龈等友希那平时不怎么伸舌头的地方都不客气地到达，乱七八糟地散落了。男子的唾液也随着肉厚流入。和勉强吃不喜欢的蔬菜时一样的丑态。所有的感觉和幻想都一下子崩溃了。只有自己心中珍贵的部分被彻底没收，什么都没有了。<br>友希那恶狠狠地碰了一下男人圆圆的胳膊。我无论如何都讨厌这种超越普通接吻的活生生的行为。因此，细胳膊像蛇一样弯曲，缠绕在粗肉上。为了把滴着汗的两只脚的小手指揉成一团，无论如何都坚持了下来。因为窒息感大脑干燥，所以无论如何都要拼命地逃跑。于是，覆盖头部的男子的赤手空拳一齐动了起来。在头顶附近擦了五指的热。这是一种慎重地确认女性的尊严，珍惜地爱抚的令人毛骨悚然的气势。<br>“嗯，中。”<br>在氧气完全消失之前，男人的舌头突然脱落了。<br>友希那的呼吸像狗一样粗暴。平坦的胸部和猥亵的肩膀在动。带有倒错性魅力的锁骨紧绷着。在口中飘香的雄性原液很不干净。<br>“友希那痰的原液，比想象的还要好吃。嘿嘿。”<br>垂头丧气的男子的赤手空拳触到了大腿。就在这时，友希那的神经跳了起来，裸身本身弹了出来。身体敏感地拒绝了第一次体验的男人的热情。男人优雅地走过友希那的肌肤。正因为理解了自己的优势，才能发挥出从容的手段。<br>（为什么会这样……）<br>友希那用微弱的眼神瞪着男人。从细眼睑的缝隙中放出激昂的火焰。由于身体内侧积存的怒气苦闷着，不过，那个怒气和黑的感情哪里也不能吐出，只是留在身体中打滚了。男子开始舔友希那的裸体。<br>“嗯，手感真好。”<br>赤手空拳是像孙女一样沉着的情绪。友希那是有生以来第一次用肌肤感受异性。异性，雄性一边威胁着友希那，一边用探索什么的情绪探索着表面。<br>（为什么……）<br>浅黑色的大手在自己的裸体上不停地移动着。友希那很不甘心。强烈的败北感让我的胸部紧绷着。我想这样的存在从一开始就无视音乐的精髓吧。比起这个，我认为首先是追究作为女性的有用性，一味地贬低。太残忍了。简直是卑劣至极。咬紧牙关，想压碎脑中的屈辱，但什么都没有改变，只是肚子里煮了。那个平坦的腹部缠绕着男人赤手空拳的热量，浅黑色的五指各自的腹部爬了起来。友希那挺起腰板忍耐着。<br>“友希那也很柔软啊。呵呵。”<br>「……真恶心。」<br>友希那从脖子到胸部再到下腹、胯间的所有水流都非常保守。虽然是接受方特有的软体，但没有必要以上的肥沃，是一片沉稳的肤色平地。<br>“哦，这里也不错。你在做什么？护理什么的。”<br>男子以顺利的动作到达了大腿内侧的友希那。<br>“别这样。”<br>“啊，什么？”<br>翻脸的友希那一边忍耐一边跳了起来。大腿内侧对友希那来说是极其个人的部分。在那里完全没有别人的接触，应该是只习惯友希那赤手空拳的部分，但是那里有男人接触。<br>“好，那就这样吧。”<br>这是一幅令人毛骨悚然的倒错的画。友希那只是压着门牙接受了男人僵硬的徒手。接着，关节大幅度移动，使其左右裂开。展示了胯间至今为止活着没有做过的角度。感觉就像是自己在展示自己猥亵的部分。脸上洒满了酸一样的羞耻。下一个瞬间，一个男人挺起了腰。<br>“你在吗？！”<br>友希那的胯间被粘住了。吓了一跳，转向胯下。在那一瞬间，从阴道到大脑，明显不是自己的讨厌的电击站了起来。突然从男子胯间的影子一样的部分飞出了什么肉的东西。<br>“诶，难道是友希那，第一次看小鸡鸡吗？”<br>“喂，你好……？”<br>面对面的那个是彻底不学无术，以自我为中心的一本书。和记忆中的完全不同的样子。这正是抛弃社会性的男人的下场。“哈哈，男人绝对会进去的。你没看过爸爸的吗？”<br>阴茎随着男人的笑声从根本部分颤抖着。友希那左右摇摆着脸。淡紫色的长发在雪白的床单上细细地游动。<br>“啊，你看，正好像麦克风一样呢！友希那一直握着的家伙！”<br>“我不知道，那种东西——”<br>友希那拼命否定眼前的男兽。本来打算把它放得很大，但因为太小，只会像咀嚼声一样散落。<br>“嘛，从现在开始就知道了很多，一起心情会变好吧。呵呵。”<br>男子傻傻地把腰伸了出来。<br>“啊，有啊。”<br>是潮湿的浓重的声音。阴茎的尖端，从龟头飘来的热度触及了友希那胯的中心。感觉就像是用没有洗过的手触摸全身一样。<br>“嗯……！”<br>友希那紧紧地瞪着眼睛。男子左右扭动着腰。友希那的裤裆更宽啦。<br>“不，啊……”<br>令人毛骨悚然的东西明确地撬开了女人的身体。硬的东西在胃中一直没有被消化，感觉很不协调。脉搏上升，皮肤起泡了。<br>“嗯，进来吧，呵呵，友希那啊。”<br>男人的脸上充满了喜悦。阴茎戳着友希那的胯间。像友希那内部的膜一样前进着。一切都是擅自的，没有任何同意，事情就这样进行着。不知为什么友希那被推了。不知道为什么在被击溃的一侧。<br>“友希那……！”<br>“呀——”<br>男子滑了滑身子。腰和腰接触的阴道突然扭曲了。<br>“啊啊啊！”<br>女体的内侧因发烧而隆起了。雄的最雄的硬度和热情，就这样在友希那的身体内部的那个里面很明显地进入着。持续了近二十年纯净的纯洁被无情地粉碎了。<br>“啊，呜呜，呜呜。呜呜……！”<br>下腹部被扩大，感觉像是膨胀了。友希那只得到了强烈的压迫和潮湿的疼痛。为了寻求空气，嘴巴一下子发抖了，但是喉咙和肺都没有吸收氧气。<br>“友希那果然是处女啊。嘿嘿，好开心啊。”<br>男人的欲望已经到达了友希那深处的母性。<br>“啊，对了，我忘了带橡胶了……”<br>作为人的重要性被蔑视，作为女性的价值被降低了。<br>“算了吧。”。坚硬的热度到达了友希那身体的深处。<br>“什么，这是什么……”友希那发出了粗糙的声音。火辣辣的脸颊上流着大量的眼泪。脑海中各种各样的人的脸一个接一个地浮现出来，最后的最后父亲的脸进入消失了。“不，啊……”<br>“我不喜欢，这是小鸡鸡。”<br>从胯间突出来的热量得到了更高的硬度，一下子逼近啦。松弛的友希那里面只剩下极为猥琐的雌气。<br>“喂……。嗯。”<br>“友希那从现在开始和我一起，要做很多喵喵！”<br>“拔出来。”<br>友希那把脸向右吐了出来。雄性的热情因不协调而积存，腹部的皮肤凹陷或膨胀。<br>“不行。”<br>“拔啊，拔啊。”友希那仰起身子。“这样啊，这样啊，讨厌啊……”<br>“嗯，讨厌吗？”<br>男人突然嘟囔着。味道很好。<br>“喂，如果不喜欢的话，不是有什么好说的吗？别那么讨厌。友希那，你是歌姬吧？好好做吧……”<br>男人很认真。埋在阴道里的阴茎像心脏一样跳动着。在胎内静静地融化了。<br>“那个……”<br>就在友希那的脑海里，刚才看到的那个鲜红的异形映入眼帘。<br>“对不起，请原谅我。”<br>友希那掐着喉咙给男人看湿润。这是依靠眼前突然出现的光的气势。<br>我没想过那是不是假的。<br>“哇，请放过我吧。拜托了……”<br>“嗯哼”<br>突然内部的男人像成长期一样肥大了。巨大的身体被覆盖，头被抓住了，雄性开始温热地活动起来。<br>“啊——”<br>整个裤裆都被搅得稀稀拉拉的。身躯摇摇晃晃地继续移动着。所有的思考都被吹跑了。一切都像溶于水的糖一样消失了。当然没有身体的主导权。<br>“嗯，嗯，停下来。为什么……”<br>“呵呵，一起心情变好吧，友希那。”<br>背着天花板的男人的声音，对友希那来说是从很远的地方响起的。持续运动的阴茎虽然有着坚硬的质感，但也有非常柔软，一下子就会上升的魄力。<br>“讨厌，讨厌。”<br>友希那的四肢分别从男人的躯体向四个方向飞出。那个扩大了很多，没能特别用力。只是对男人贪婪的动作作出反应而发抖。<br>“就这样，喜欢。雪啊……”<br>男子叹了一口气，继续动着腰。友希那的所有部位都充满了那个男人出汗的湿润和热度。持续摩擦的下腹部有猥亵俗气的疼痛。这是一种被恶意从内部挖出内脏器官的感觉。全身被独特的不卫生和不道德所揉搓、崩溃的感觉，是对友希那的纯粹的反抚。拼命咬紧牙关忍耐的时候，蒸汽和受伤的野兽一样的声音漏了出来。<br>“啊，友希那，就这样……”<br>男人拥抱着友希那。在腋下的附近各自远离手臂，在平坦的乳房上涂上了罕见的脸。和喜欢的布娃娃一样。强行将一切托付给女体，拼命地寻找安心。<br>“嗯，就这样。好雪啊。”<br>令人毛骨悚然。又难看又愚蠢。丑态本身，只要进入视野，肚子的深处和牙齿就会发痒。这是一个什么都不咬合的不协调的世界。<br>友希那的脑海里想起了那一击。<br>被别人殴打的经验当然是第一次。我对自己存在着从事这种行为的势力感到吃惊。与其说如此，倒不如说友希那对这个世界上真的有对女性执行暴力的男人这一事实本身感到惊愕。<br>“啊，呵呵，雪啊，雪啊，雪啊……”<br>友希那的躯体现在正被压迫着。为了应对痴迷男人的肌肉动作，友希那内部的肉也弯弯曲曲的。简直就像是身体和身体快乐地粘在一起的感觉。<br>“哇，好舒服，好厉害，哦，好雪啊。”<br>每当男人这样蠢蠢欲动的时候，友希那曾经相信的一切都摇摇欲坠地崩溃了。常识本身因热和疼痛而改变。对峙着的这个男人一心一意地意识到只有生殖器能感觉到的友希那使用着。友希那被蔑视自己的意见，被自由决定权利。是到现在为止的朋友希那的全部践踏嘲笑的行为。这是极其强硬和自以为是的行为。<br>“啊，呵呵，呵呵，就这样……”<br>男人的双手触摸着友希那的头颅本身。从蠢蠢欲动的腰上感受到了粘稠的最坏。即使赌上了全部也擦不掉的雄性丑陋的真骨顶被涂上了。很快愤怒就涌了出来。但是面部和阴道的剧痛消失啦。友希那的气概都被转换成童女般的贫弱。已经不能逃跑了。被刺入的阴茎的尖端触及友希那的母性打算撬开入口的孔。<br>母性是所有男人用动物本能不断追求的女性的本质。<br>而且友希那的下腹部也很好地存在着其本质。<br>“这是最棒的漫画。正是为了被我抱而出生的样子……”<br>友希那隐藏在内心的母性被凝缩的肉棒压扁了。从下部的阴道全部被推入的感觉，自己的核发生了异质的友希那感到了超过厌恶的恶心。<br>“真的，很高兴你能努力活到这里。”<br>男人信口开河。当然友希那里面没有那样的意识。友希那的人生应该只是为了音乐而存在的。应该只是以拥有强大的核心的顶点为目标。<br>“啊，出来了。出来了。”<br>男子在友希那的右耳附近嘟囔着。伴随着声音，湿润的水滴被耳朵卡住了。<br>“喂，有点——”<br>“精液！精子出来了。”<br>友希那里面有异质的电信号，眼睛又恢复了。男子的腰部动作逐渐加快，逼近喉咙。<br>“我要把它交给娜卡。就这样的娜卡。空的。”<br>友希那使劲喉咙想喊什么。但是烧焦的肉弹不需要问答，一直在不停地移动。懒洋洋的屁股像是在欺骗友希那的发言权。<br>“咕嘟。呜呜，好雪啊，放在里面。给友希那种上种子。不，出去吧。”<br>粗壮的胳膊缠在身上紧紧地围了起来。男人什么都有把友希那当成自己的东西射杀的气概。这是一种顽强的执念，友希那的心脏以与之同步的感觉表现出强烈的作用。友希那咬紧牙关。紧紧地握住床上的床单。孔被开拓，肉壁被削掉了。我的腹底瑟瑟发抖。<br>“真是的。真是的，真是的。我要出去了。我要来了。”<br>男人的汗和友希那的肉黏糊糊地缠在一起揉搓着。<br>“不行，不行……”<br>“嗯！”<br>友希那被紧紧地压住了。身体硬朗，四肢的手指都被压碎了。我觉得好像有什么东西突然流入的发射声在脑海中响起。只有阴道内有很大的起伏。<br>“啊，啊……”<br>积存在下腹部的温暖的重量在身体内部爬行，勒住了喉咙。一切都是遥远的只有自己被玷污了。自己曾经抱有的坚强的纯情和在那之后的未来是浑浊的白色，完全变成了臭味。<br>“嗯。呵呵。友希那，中出……”<br>男人永远抱着友希那。为了不让绝好的雌性逃跑的男人的粗壮的独占欲被发挥出来，用汗成熟的肉们紧贴着。男子在友希那内部蠢蠢欲动了几次。在腹底得到小爆炸的友希那四肢和意识无力了。那是只发生在败北者身上的放弃。握着床单的细手指啪的一声沉了下去，沉重的双脚也一下子掉了下来，变得软弱了。<br>男人即使这样也没关系，几次小痉挛，连续种在友希那的母性上。被挤进去的潮湿的流体在友希那的怀里融化了。<br>接着，在友希那中吐露的男人，解开了那酸溜溜的拘留，起床是几分钟后。<br>“喂，看，我怀孕了，友希那。”<br>男人的阴茎被刺进去了，像压迫阴道一样还很大。<br>“友希那要生孩子了！我的孩子！”<br>“这个，但是……”<br>那个单词在友希那里面强烈地飘浮着。有着确实的重量，在神经上沉甸甸的响个不停。我觉得男人说出来的话变成了明确的事实。因为不想知道而拼命偏离意识的现实和被强行面对的感觉。<br>“呵呵。呵呵，我们是夫妻啊。呵呵，算了。”<br>友希那被埋得满满的。我想全部吐出来。我想做什么都没有的事。我想把它排除干净。但是，在逐渐变淡的黄金瞳孔中捕捉到的天花板很远。<br>“养育孩子什么的，加油吧。”<br>男人的赤手空拳爬上了友希那的额头。同时阴茎到达深处，友希那的下腹部全域都湿透了。因为发烧，友希那清楚地理解了自己母性的位置和形状。<br>“啊——”<br>被强加的无数物种在不发达的母性中扭曲着。那亿左右的白色孩子们像孩子一样自由奔放。又活泼又豪爽。认定独一无二的友希那胎内为完全安全肯定的肉室内。<br>孩子们天真地继续游泳。自由地进入了蠢蠢欲动的朋友希那的母性的更深处。那是相遇。这是处于极为野生动物湿度的男女唯一能形成的神秘现象。<br>孩子们面向母体发挥了雄厚的气概。这就是种子的作用和使命。没有迷惑。友希那的象征是一条直线。为了绝对不让友希那的母性逃跑，迅速包围并突击。<br>孩子们想要进入友希那的母性之中。用力地摩擦着膨胀的头部，精神饱满地突破，拨开其内部强行与友希那融合在一起。<br>就在这时，友希那意识到自己的母体本身在蠕动。在胎内发生的相遇虽然很小，但却是明确的奇迹。完全被掠过的友希那的人性深深地影响着。不是幻听。是孩子们的声音。是来自男人的孩子的声音。这是从彻底污染自己的生命力中得到的最后的回报。友希那现在正作为生物发生着变化。作为雌性前进着。被不情愿的男人及其种子强行推上了真正的母亲。<br>升华后的友希那在感情中意识到无尽的沉重。<br>“嗯……。稍微动一下。”<br>我刚要发出反抗的声音就停止了呼吸。塞子翘起来，喉咙发酸。男人在动。阴茎终于脱落了。只留下血管闷热的屈辱和肚子里温热的精液，雄性就出来了。雌性直到最后都认真地叼着那个。就像挽留自己唯一的丈夫一样尊贵而顽强。<br>“哈哈，友希那，你打扮得好漂亮。”<br>终于解放了的友希那却杂乱无章地放任身体。胳膊和脚都像扔到身体外侧一样张开。作为过去的淑女，或者作为歌姬，完全没有优雅地整理身体的余地。因此，友希那在吃了自己的罪魁祸首面前，却把雌的保持原样。从充满白色浑浊的裸露阴道里，有什么东西隐隐地弥漫着。那条胯间不时地往上颤动。<br>友希那一边持续着巨大的呼吸，一边看着视野中的光。这是至今为止被男人的巨大身体遮挡的天花板上的照明。总觉得很久了。我很惊讶原来是那么薄的光。<br>在脑海里的是后悔。从收到邮件的那一瞬间开始，我就觉得自己脏了。我以为是和男人的命令一起接受了污秽。我觉得如果没有关系就好了。我觉得无视就好了。调查男人的事，遵从，来到这个房间的全部的记忆成为后悔的一色。然后找不到前面的路。我觉得在所有选择的尽头等待的是灰暗。我认为在下腹部经常出现的扭曲的热量才是作为女性失败的证明。<br>有一个大影子慢慢侵蚀天花板上的那个光源。<br>友希那的女体完全被那个影子遮住了。<br>“那么友希那，继续，做吧！”<br>男子的赤手空拳碰到大腿被强行拉扯。<br>友希那被强迫在男人面前更猥琐的开脚。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      <categories>
          
          <category> 强健凑有希那系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> R18 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俺的凑有希那</title>
      <link href="/posts/54c4e9d3/"/>
      <url>/posts/54c4e9d3/</url>
      
        <content type="html"><![CDATA[<h1 id="俺的凑有希那">俺的凑有希那</h1><p>我把叠好的衣服放在走廊的地板上。就在门的旁边。周围一片昏暗，只有门露出了水面。我凝视着那扇门想到了对面。胯间勃起的新鲜度提高，身体本身绷紧了。我劈里啪啦地往里走。<br>“什么？诶？啊——”<br>我的凑友希那在自己的房间里。黑色的长裙和白色的长袖，虽然保守但还是能闻到哥特洛丽塔的质感。<br>“嘿嘿，你好，友希那。”<br>我一边感受着室内的空气，一边站在房间的中央。<br>“嗯，什么，诶……？”<br>坐在学习桌上的友希那虽然很困惑，但还是很有气势地站了起来，飒爽英姿地和我保持了距离。<br>“不用害怕。我很安全，所以先把衣服交给友希那吧。”<br>“轻佐……”<br>胖乎乎的友希那的嘴唇半张地颤抖着。简直就像在怪物面前一样的空气。我想起了一个把胳膊肘收在身体内侧的坚强女孩。<br>我的身体只有两个嗜虐的男性，在那个袋子里充满了浓厚的干劲。<br>“友希那，好吧——”<br>“我得叫警察。”<br>友希那坚定地嘟囔着命令自己。但是身体好像完全处于恐怖中。我瞄准那天真无邪的一瞬间向她逼近，堵住了她的肉厚。<br>“嗯——”<br>我抱着友希那的肩膀，一边帮助他一边把嘴推开。友希那为了逃避我而摇头，拼命地抽搐着小小的身躯，只是女性音乐家的力量不可能敌我，只是作为有嚼劲的反抗期沉没了。<br>我离开了友希那。口腔内部回收了大量她艳丽的唾液。我，象那样做贵重的食物一样地咀嚼友希那，在牙龈涂上硬咽下了。<br>“嗯，喂。”<br>我在友希那面前冷静下来。连相互连接嘴唇的透明线也意识到了确实的留恋。相对的友希那总觉得害怕。虽然是自己的房间，但是作为客人的我好像更适应空气感，现在的状况很奇怪。<br>下一个瞬间友希那的目光变得锐利，白色的右手向我飞来。<br>那只手掌没有弹过我的脸颊肉。<br>“——什么？”<br>我紧紧地抓住了友希那右手的脖子。友希那的双眼圆啦。眼睛里浮现出女性的危机感。虽然友希那似乎慢慢地感受到了自己的无力，但即便如此，友希那还是拼命地压死了这种感觉，赤手空拳。<br>“不行啊，友希那。”<br>我尽情享受了友希那的贫弱，直到开心之后，把她扔到了床上。像母猫一样短暂的悲鸣在室内劈开。我像追着那个一样爬上了床。<br>“啊，你是什么！？为什么，为什么会这样——”<br>“我喜欢你。”<br>友希那在床上也打算逃跑。拼命地匍匐着，只对着我屁股，急着要向别的地方出发。<br>“不行，你看，老实点。”<br>“讨厌。讨厌。”<br>我用双臂感受到了友希那的无力。所有拼命的抵抗在我的下面都变得不适当了。惊慌失措的四肢和淡紫色的长发，全部都在我的双臂的支配下。<br>“放开我，求你了，你再找个地方去！”<br>“不，我还什么都没做呢。”<br>结果，只感觉到友希那也是少女。无论裹着多么艳丽的孤高，其果实也只是可爱地吃着的生女儿。<br>“喂，友希那知道吗？和喜欢的人在一起的话，心情会很好。”<br>“我不知道，我不知道。所以，算了。”<br>友希那拼命地摇头否定。那张膨胀的通红的脸，只是把我锐利的爱欲做得更高。<br>“我和朋友希那的优点，一定是最舒服的。”<br>我，是充分品味这个朋友希那拼命的雄的猛兽。<br>“你不是说不知道吗？！已经离开了！放开手！”“……嘛，先脱了吧，友希那。”<br>我把手搭在友希那的裙子上，一口气脱了下来。把紧贴着脚轮廓的紧身裙剥下来，黑色的内衣裸露出来。我把手指也挂在了那个朋友希那身上。<br>“啊，等等，那里是——”<br>我把友希那的内衣撕下来了。<br>“喂！”<br>友希那的四肢一齐停止啦。由于只露出了下半身，友希那拿着的腰周围的厚度更好地看了。我微笑着，把手放在腰和屁股上，轻轻地摩擦着。接触到了皮肤没有停滞的光滑质感。<br>“呵呵，好屁股……”<br>我一边笑一边勒紧了张开的五指。为了抓住友希那屁股的柔软而爱玩的时候，女体左右的小肩膀跳了起来。<br>“别这样……。别这样，求你了。”<br>是颤抖的声音。总是仰望着的那个高贵的朋友希那是无法想象的态度。只有我的优越感很肥。抓住友希那继续摩擦。<br>“嗯，为什么要碰呢？”<br>友希那从那里没有动，也没有反抗。我完全被我这种压倒性的惊异吓到了，感觉到了露出屁股的情绪。我很好地抚摸了友希那。友希那下半身的肉末女性性地丰满。与上半身和容貌的幼气相反，只有那里是彻底的雌性。是成熟的新鲜雌性。这是一种吸引男人变成雄性的特异肉感。是使之恰好完成抱男人的性的准备的高兴的成果的肤色。<br>“那么，就这样吧。”<br>友希那一直颤抖的声音抚摸着我。“我知道了。那个，就这样，让你随便摸身体，屁股，乳房。我会全部脱下来的，我会给你内衣的。所以，痛的是……”<br>“我查了很多方法。”<br>第一次还是从后面开始好。想就这样匍匐破坏这个纯洁的朋友希那，像野生的交尾一样耀眼。<br>“喂，求你了。听话。不管是恋人还是什么，都会成为你的。因为我会喜欢你的，所以……！”<br>我用手指触摸了友希那的秘密。用手指拨弄了与其他肤色明显不同的潮湿裂缝。一下子友希那的肌肉的抵抗感就淡薄了。<br>“住手……那里不行，真的不行，不行。”<br>“没关系的。我啊，一定会领先你的。呐，友希那。”<br>我把温暖的声音转向语速快的友希那，然后握住那浅薄的臀部，抬起自己的腰，轻轻地戳了一下友希那的秘密。<br>“哇——”<br>拒绝一切而闭上的友希那的湿润挂着我的桃子的嘴唇，一边把从尖端垂下来的油涂成裂缝一边推着前进。<br>“等等，别这样，拜托了。”<br>“没关系。马上心情就会变好的！”<br>我不需要问答就把不发达的问题撬开了。以作为男人的实力把友希那破坏得一塌糊涂，友希那简直就像回应了一样尖叫着。呼吸中混杂着不道德，变得不稳定。<br>“什么呀，不行。疼啊，不行啊！”<br>背上凶猛地跳动着，衣服伸长了，汗湿地贴着。纤细的四肢和艳丽的长发扑腾而来。我向那个朋友希那深深的肉感打招呼。<br>“会裂开的。又会裂开的。所以要离开——”<br>“友希那！”<br>我一边眺望着弯曲而妖艳起伏的背影，一边向前弯着腰完美地挤进了友希那的内部。破瓜的响声以完美的纯度触摸着。友希那仰望着房间上面的某个部分的尖叫声响起，那细小的娇声就像枯萎而失去颜色的花一样，马上就无力了。<br>“嗯，嗯……。好雪啊，嗯，嗯。”<br>我在友希那上面动了动腰。友希那的女性部分，充分正确地给予了我的肉的形状和热。<br>“什么啊，什么啊，这个啊……”<br>破裂的友希那只是在我的内侧蹦蹦跳跳。我经常看到肩胛骨有很大的起伏。我摇晃着腰确认了友希那。友希那拼命地想从什么地方逃出来，结果什么也做不了，像是被打中了一样像杂鱼一样，只在我的下面蠕动。<br>“雪，喜欢……”<br>我有一种温暖的成就感。在孔的墙壁上密密麻麻地繁荣昌盛的肉鳍，怎么也拘束地包着我抓住了。友希那外表看起来很活泼，充满了没有企图的可爱，但其内部就像她创造的音乐世界一样完美地调整着。真是名器极品的女人。<br>把那个女神从舞台上拉下来，作为我兽欲的发泄口。用完全不同的方法彻底享受音乐家凑友希那的这种心情，是真正的爱慕。<br>“为什嚒，这样的事，这嚒痛……。”<br>友希那沉重地摇动着自己的头部。挂在右肩上的长长的淡紫色，像是哗啦哗啦地流下来，摩擦着床单。<br>“我喜欢你。喂，我是大小姐，友希那。”<br>我连声叫友希那说。这是爱的人之间的性行为中不可缺少的爱的私语。<br>“喜欢，喜欢。非常喜欢。朋友希那。喜欢——”<br>实际上一吃起来心里就发烧了。这是一种解放内心隐藏的欲望的感觉。<br>“最喜欢你了，友希那。呵呵。”<br>“讨厌”<br>友希那的头部大幅度颤抖，头发的淡紫色显示出夸张的流动。<br>“我喜欢你。”<br>“拔出来……”<br>友希那的双手似乎用力了。<br>“嗯？”<br>“拔掉……！”友希那像开花一样突然怒吼。“够了吧？这样的东西，这样啊，不可能啊！”<br>友希那一边低头一边尖叫。小小的肩宽还是拼命地蠕动着。拼命的骨头的形状从薄薄的衣服下面浮了出来。<br>“这样啊，我希望你在……”<br>我烧了之后马上启动了。同时，从友希那的喉咙深处飞出了很高的东西来招待我。我感觉就像是喜欢战利品一样。我一边策划着确实射中这个朋友希那，让他成为只属于我的东西，一边不断地碰撞着身体。<br>“啊，喂，为什么——”<br>“因为现在马上就要到了，所以是友希那的漫画。”<br>拉了一次深深刺进去的腰之后，又连续打了一个马上跑到里面的单调动作。<br>“哦，好厉害。嗯，友希那漫画，很舒服。”<br>友希那的肉壁有着清澈的力量，毫不费力地舔了内部的我。那个彻底的意识与作为歌手的她相通，我一边得到更支配性的感觉，一边蹂躏了友希那或者细女神。<br>于是被下侧虐待的友希那的混乱，终于变成了违背道德的哭喊的样子。<br>“这是什么？这是什么？”<br>“做爱。做爱。交尾的事。真是个了不起的家伙。”<br>友希那明显是什么决口的样子。双臂在肘部弯曲，上半身像优柔寡断一样起伏，只留下甜蜜的悲鸣。<br>“我们真是恩爱啊，会做很了不起的事的。”<br>“我不知道。我不知道这样的事。别这样，现在马上。讨厌。”<br>友希那一边摇头一边否定。绝望和苦闷混杂的声音，从淡紫色的毛发中像飞沫一样细小地散落了。<br>“要变得更舒服。”<br>我怀着贪求朋友希那无知的心情一下子抬起了腰。肉孔反应迟钝地舔着我。<br>“嗯，啊。好痛啊。”<br>友希那勉强保持着人类特有的呼吸。至今为止从未感受到的窘境中的那个生命的肤色，让我心中的喜悦更加高涨。<br>“这样啊……”<br>我忍不住喊了起来。被人生中突然出现的男子气概打败，尽管如此还十分艳丽的小痴态的友希那很可爱。<br>“啊，出来了。出来了。”<br>“什么，你要出来——”<br>“友希那，出来了。交给友希那的娜卡”我感觉到对友希那的绝对的爱，在腰的位置具体化上升了。<br>“让她怀孕。让她怀孕吧，让她做我的妻子。雪啊，友希那，嗯。”<br>“二、人信……？”<br>友希那的双肩突然停了下来，叼着我的氮一齐变强了。<br>“啊，漫画变得很辛苦啊。果然，友希那也想生我的孩子啊。”<br>“啊，就是这样——”<br>友希那回头大叫。我当然没有停止。因为已经决定给这个雌性种种子，所以高速化了。皮肤和皮肤形成的干燥的声音在室内回响。温暖而激烈的东西涌了出来。<br>“那嚒，嗯，我要向友希那中出。”<br>“你有点，啊，不干了——”<br>“呜呜……！”<br>为了遮挡友希那的悲鸣，我贴在她苗条的背上停止了。友希那像是被我从后面撞了过去似的翘起了背。我压迫着那个内部。强烈的释放感觉很温暖。身体本身像女孩子一样蜷缩着。<br>“这是什么？”<br>接受我的朋友希那不自然地说出了声音。女体本身向外侧飞散，好像变重了。<br>“又有不知道的东西。肚子很热……”<br>“嗯，去啊，去啊……”<br>我从粘在身上的衣服中感受到了汗水，更加粘稠地珍惜友希那的臀部。刺入阴道的蠕动更加厉害地持续胡闹，吐出我独自的浑浊的精。<br>“呵呵，对友希那，对友希那中出……。呵呵。”<br>我玷污了只属于我的女神，独占了她。只有我粘稠的种子们，拼命地束缚着她的人生。像是作为生物具体托付的那样，介入了不合理的事情，这种绝顶的感觉一直持续着。<br>“啊，你做了什么……？喂，这是什么……？”<br>友希那终于像人类一样张开了嘴。那充满无知的恐惧刺激了我。确实作为男人的存在意义本身就是被打动的感觉。<br>“再……”<br>我的欲望没有枯竭。<br>“还没做……”<br>在友希那屁股的位置抬起身体的我，强行驱动了湿漉漉的友希那。<br>“雪了。”<br>我再次热情地污秽了友希那的肉体。一直是欲望的驱使。这是再次确认我认可的雌性的肉体实力的气势。<br>“等等——”<br>我把身体向前倒下，拉到了友希那的背上。白色的衣服和我的鼻头像接吻一样接触了。<br>“嗯，哈哈，被……。嗯。”<br>“喜欢、喜欢、喜欢……”<br>我想打友希那的屁股。也许是因为一次硬的东西破裂了，那个洞里的肉比较顺利地接受了我。倒不如说我越过度使用那个阴道，孔就越适合我的变形。友希那好像变成了我的专用。培养友希那阴道的感觉就像是成为了她的父亲一样，所以我什么都不管，从后面吃了女体。<br>“我一定会让你怀孕的。我会让你怀孕的。”<br>只有没有咬合的彼此的粗暴呼吸散落在室内。友希那的淡紫色在床单上懒洋洋地垂着，为了回应腰的动作和呼吸，敏感地摇晃着，沉重地流着。友希那已经只是低着头用力啦。背上咯吱咯吱地反弹着。好像是这样忍受着刺激。我为了从上面按住它，为了保护它而抱着它。在腹部附近通过双臂固定下半身本身，从后方推上来享受。<br>“已经出来了。”<br>在友希那耳边呻吟，友希那的身体在内部颤抖。<br>“等一下。喂，拜托了，等一下。”<br>友希那突然，像是复活了似的喊了起来。身体好像在向危险的方向反应。我跳进那个朋友希那的脖子吸引了他。味道很甜。是友希那的体臭。活泼的人的香味和新鲜的少女般的甜味同时诱惑了我。从胯间升起的热量，作为明确的重量总结了我的身体。<br>“喂。喂，交给友希那的娜卡。嗯。”<br>“等等。讨厌。那里面，啊，不能做。”<br>由于对在胯间的位置被粘住编织的友希那的爱，总觉得膝盖内侧浮起来了。<br>“已经出来了，我要拿出来了。里面有友希那的娜卡。呵呵。”<br>“你不是说讨厌吗？！那种东西，我已经讨厌了。已经讨厌了！别这样。拜托了——”<br>“哇！”<br>友希那艳丽的尖叫让我嘴角上扬，我让柔软的肉让自己陷入。在内部像心跳一样起伏，只有精疲力竭。友希那悲壮的声音祝福着它，单薄的肩胛骨露骨地凸出，颤抖着。白色的高雅的衣服把身体的轮廓清晰地显示出来，把我的情绪引向了更加热烈的方向。<br>“啊，热的东西啊，肚子里有很多……”<br>友希那虽然很坚强，但在那阴道里却把我榨干了。那是作为雌性的作用，所以是理所当然的。我坐在这样的朋友希那的腰上，用力地动了一下。友希那的褶皱下半身舔着我。<br>“嗯，再出来。”<br>我给友希那解开了小爆炸。连受精都送到了。我忍不住爬到友希那混进了腰。这样的话，我的心情就在公主的内部随意地烙印了。<br>“嗯，嘿嘿，太棒了，友希那的包子。嘿嘿……”<br>我感觉到自己的征服欲充满了温暖。我的粘液糟蹋了她至今为止持续的摄生。我这个污点贯穿女性，连纤细强壮的血脉都混合在一起的这种感觉，正是作为友希那丈夫的我的特权。<br>“……这是怎么回事？”<br>友希那一边掉着头一边低声呻吟。充满无力感的声音。<br>“我什嚒都没做。为什嚒是我，这样，那样。”<br>“呐友希那，下次一边看着彼此的脸一边选吧。”<br>但是，像是自己承认失败一样，没有任何气概的娇声，只会让我冷淡的热烈再次激进。<br>“友希那面向我，抱着我！”<br>我握住友希那的腰从友希那的内部离开了。虽然有一种被吐出来的感觉，但还是一点也没有枯萎，那浅黑色的表面，已经被不知道是哪一种的粘液清澈了。<br>“真的像恋人一样的样子，呐，友希那——”我抬起头看着友希那。“咦，友希那？”<br>友希那在床上展开。两只脚都乱了，两只胳膊杂乱地扔着。虽然是像烧焦的爬虫类一样的姿势，但我却被那个朋友希那狠狠地打了一顿。<br>“呵呵，累了吗？友希那。”<br>随着声音，腰的根本突出了。友希那垂下的眼睛，或者是张大了嘴的傻瓜，从以前纯真的明亮一变。像剧毒一样水灵的阴影。明显地邀请了我的爱欲。<br>果然友希那也在真正的部分，充分理解了自己不是为了唱歌，而是为了我这个强者的性欲而出生的雌性。<br>我爬到那个朋友希那上面。为了减轻体重而趴着，把火辣辣的女人身体压碎揉了起来。友希那还是没有动。完全容纳在我的身体里，只是继续沉重的呼吸。<br>“好臭……”汗流浃背的脖子和脸颊的肤色缠绕着的细小的毛发的淡紫色，使妖艳而昏暗的气氛更加强烈。<br>“喂，没事吧？累了吗？喂，友希那。”<br>我在友希那的耳边低声私语。试着摩擦胯间，热气再起，一边得到更勇敢的硬度一边陷入了肉厚。<br>突然，友希那的耳朵映入眼帘。小耳朵通红。总觉得好像在哭。我看到了。那样的话，我觉得必须充分治愈。我以友希那的耳旁风为目标，拧着舌头。<br>友希那的腰朝我的方向，只跳了一次。</p><hr><p>原作者：<a href="https://www.pixiv.net/users/17095183">Pixiv-幼女の美肉。</a></p>]]></content>
      
      
      <categories>
          
          <category> 强健凑有希那系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凑有希那 </tag>
            
            <tag> BangDream </tag>
            
            <tag> R18 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪杰斯特拉算法</title>
      <link href="/posts/5554a4d5/"/>
      <url>/posts/5554a4d5/</url>
      
        <content type="html"><![CDATA[<h1 id="迪杰斯特拉算法">迪杰斯特拉算法</h1><h3 id="介绍">介绍</h3><p>Dijkstra 算法由荷兰计算机科学家 <em>E. W. Dijkstra</em> 于 1956 年发现，1959 年公开发表。是一种求解<strong>非负权图</strong>上单源最短路径的算法。</p><h4 id="图示">图示</h4><p><img src="/img/dijkstra.gif" alt="迪杰斯特拉图示" title="dijkstra"></p><p>实现 Dijkstra 算法需要维护两个集合和一个哈希表，第一个集合存储已经访问的节点，第二个集合存储未访问的节点，哈希表用于存储各个节点到起点的距离权重。<br>在进行一轮算法时，查找第一个集合内元素的相邻元素，将距离原点距离最短的元素加入第一个集合，与此同时在第二个集合内删去该元素，更新距离哈希表。</p><p>例如，设置起点为0，第一个集合为：{0}，第二个集合为：{1,2,3,4,5,6}，哈希表初始化为：</p><p>{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>2</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>3</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>4</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>5</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>6</mn><mo>:</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">0:0,1:\infty,2:\infty,3:\infty,4:\infty,5:\infty,6:\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>}</p><ol><li>从0节点开始，可以到达1、2两个节点。</li></ol><p>更新集合1：{0,2}<br>只选择哈希表内距离最近的节点，抛弃1节点</p><p>更新集合2：{1,3,4,5,6}</p><p>更新哈希表：<br>经过0号节点到达1号节点的距离是5，到达2号节点的距离是2，有：</p><p>{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>:</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo>:</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>4</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>5</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>6</mn><mo>:</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">0:0,1:5,2:2,3:\infty,4:\infty,5:\infty,6:\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>}</p><ol start="2"><li>从2节点开始，可以到达3、5两个节点；从0号节点开始，可以到达1节点。</li></ol><p>更新集合1：{0,1,2}<br>只选择哈希表内距离最近的节点，抛弃3、5节点</p><p>更新集合2：{3,4,5,6}</p><p>更新哈希表：<br>经过2号节点到达3号节点的距离是2+6，到达5号节点的距离是2+8；</p><p>哈希表内节点距离取最小，有：<br>{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>:</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo>:</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>:</mo><mn>8</mn><mo separator="true">,</mo><mn>4</mn><mo>:</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mn>5</mn><mo>:</mo><mn>10</mn><mo separator="true">,</mo><mn>6</mn><mo>:</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">0:0,1:5,2:2,3:8,4:\infty,5:10,6:\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>}</p><ol start="3"><li>从2节点开始，可以到达3、5两个节点；从1号节点开始，可以到达3、4节点。</li></ol><p>更新集合1：{0,1,2,3}<br>只选择哈希表内距离最近的节点，抛弃4、5节点</p><p>更新集合2：{4,5,6}</p><p>更新哈希表：<br>经过1号节点到达3号节点的距离是5+1，到达4号节点的距离是5+6；<br>哈希表内节点距离取最小，有：<br>{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>:</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo>:</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>:</mo><mn>6</mn><mo separator="true">,</mo><mn>4</mn><mo>:</mo><mn>11</mn><mo separator="true">,</mo><mn>5</mn><mo>:</mo><mn>10</mn><mo separator="true">,</mo><mn>6</mn><mo>:</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">0:0,1:5,2:2,3:6,4:11,5:10,6:\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>}</p><p><strong>依次类推</strong>，当最后集合2为空时，算法结束，哈希表内为最短路径。</p><p><a href="https://gallery.selfboot.cn/zh/algorithms/dijkstra">详细演示</a></p><hr><h3 id="算法示例">算法示例</h3><p>对邻接矩阵进行迪杰斯特拉算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">Dijkstra</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// static graph, nodes num, start node </span></span><br><span class="line"><span class="built_in">Dijkstra</span>(std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;g, <span class="type">int</span> n, <span class="type">int</span> k):<span class="built_in">g</span>(g),<span class="built_in">n</span>(n),<span class="built_in">k</span>(k)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;g;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">GetDistance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(n, INT_MAX/<span class="number">2</span>)</span></span>;</span><br><span class="line">    dist[k - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; n; ++y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[y] &amp;&amp; (x == <span class="number">-1</span> || dist[y] &lt; dist[x])) &#123;</span><br><span class="line">                x = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        used[x] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; n; ++y) &#123;</span><br><span class="line">            dist[y] = std::<span class="built_in">min</span>(dist[y], dist[x] + g[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ol><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/network-delay-time/">leetcode 743.网络延迟时间</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/posts/59a0de58/"/>
      <url>/posts/59a0de58/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组">树状数组</h1><h3 id="介绍">介绍</h3><p>树状数组多用于<strong>单点修改</strong>和<strong>区间查询</strong>，是一种代码量小的数据结构，扩展数据结构为<strong>线段树</strong>。</p><h4 id="图示">图示</h4><p><img src="/img/fenwick.svg" alt="线段树图示" title="fenwick"></p><p>最下面的八个方块代表原始数据数组 a。上面参差不齐的方块（与最上面的八个方块是同一个数组）代表数组 a 的上级——c 数组，即树状数组结构。<br>c 数组就是用来储存原始数组 a 某段区间的和的，也就是说，这些区间的信息是已知的，我们的目标就是把查询前缀拆成这些小区间。<br>例如，从图中可以看出：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 管辖的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo>…</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1 \ldots 2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">c_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 管辖的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo>…</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1 \ldots 4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">c_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 管辖的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>5</mn><mo>…</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[5 \ldots 6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">5</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">]</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">c_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 管辖的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo>…</mo><mn>8</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1 \ldots 8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">]</span></span></span></span>；</p><p>剩下的 c[x] 管辖的都是 a[x] 自己（可以看做 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>x</mi><mo>…</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[x \ldots x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 的长度为 1 的小区间）。</p><h4 id="lowbit函数">lowbit函数</h4><p>例如，欲查询 a 数组第1元素到第7元素的和，可以分解为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>4</mn></msub><mo>+</mo><msub><mi>c</mi><mn>6</mn></msub><mo>+</mo><msub><mi>c</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">c_4+c_6+c_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">c_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 开始依次向左跳跃。</p><p>跳跃的节点依据 <strong>lowbit</strong> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// x 的二进制中，最低位的 1 以及后面所有 0 组成的数。</span></span><br><span class="line">  <span class="comment">// lowbit(0b01011000) == 0b00001000</span></span><br><span class="line">  <span class="comment">//          ~~~~^~~~</span></span><br><span class="line">  <span class="comment">// lowbit(0b01110010) == 0b00000010</span></span><br><span class="line">  <span class="comment">//          ~~~~~~^~</span></span><br><span class="line">  <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lowbit函数可以提取节点序号最低位的1，<br>观察到每次将节点序号最低位1置0，就是下一跳位置，因此可以不断将查询节点进行lowbit直到下一跳为0。</p><p>而查询任意区间和只需将左右序号查询结果相减。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> pos1,<span class="type">int</span> pos2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret1, ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ret2 += c[pos2];</span><br><span class="line">        pos2 -= <span class="built_in">LowBit</span>(pos2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pos1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ret1 += c[pos1];</span><br><span class="line">        pos1 -= <span class="built_in">LowBit</span>(pos1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret2-ret1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而在对线段数组进行更新时，只需按照查询方法在每一跳的树状数组节点上进行更新。</p><hr><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LowBit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> length) &#123;</span><br><span class="line">        c.<span class="built_in">resize</span>(length, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pos1-&gt;pos2加上i</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">int</span> pos1, <span class="type">int</span> pos2, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (pos1 &lt; c.<span class="built_in">size</span>()&amp;&amp;pos1 &lt;= pos2) &#123;</span><br><span class="line">            c[pos1] += i;</span><br><span class="line">            pos1 += <span class="built_in">LowBit</span>(pos1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求pos1-&gt;pos2总和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> pos1,<span class="type">int</span> pos2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret1, ret2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ret2 += c[pos2];</span><br><span class="line">            pos2 -= <span class="built_in">LowBit</span>(pos2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (pos1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ret1 += c[pos1];</span><br><span class="line">            pos1 -= <span class="built_in">LowBit</span>(pos1);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> ret2-ret1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ol><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/the-skyline-problem/">leetcode 218.天际线问题</a></li><li><a href="https://leetcode.cn/problems/range-sum-query-mutable/">leetcode 307.区域和检索 - 数组可修改</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/posts/c517589e/"/>
      <url>/posts/c517589e/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集">并查集</h1><h3 id="介绍">介绍</h3><p>并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。<br>顾名思义，并查集支持两种操作：</p><p>合并（Union）：合并两个元素所属集合（合并对应的树）</p><p>查询（Find）：查询某个元素所属集合（查询对应的树的根节点），这可以用于判断两个元素是否属于同一集合</p><p>并查集在经过修改后可以支持单个元素的删除、移动；使用动态开点线段树还可以实现可持久化并查集。</p><h3 id="算法示例">算法示例</h3><ol><li>原始并查集</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Disjointset</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="built_in">Disjointset</span>(<span class="type">int</span> n):<span class="built_in">parent</span>(n<span class="number">+1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent[index]==index?parent[index] : <span class="built_in">Find</span>(parent[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> index1,<span class="type">int</span> index2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> pa = <span class="built_in">Find</span>(index1);</span><br><span class="line"><span class="type">int</span> pb = <span class="built_in">Find</span>(index2); </span><br><span class="line"><span class="keyword">if</span>(pa!=pb)&#123;</span><br><span class="line">parent[pa] = pb;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>路径压缩</li></ol><p>将节点的父节点设置为原树的根节点</p><p><img src="/img/disjoint-set-compress.svg" alt="路径压缩" title="disjoint-set-compress"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parent[index]==index?parent[index] : parent[index] = <span class="built_in">Find</span>(parent[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>按秩合并优化后的并查集</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Disjointset</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="built_in">Disjointset</span>(<span class="type">int</span> n):<span class="built_in">parent</span>(n<span class="number">+1</span>),<span class="built_in">h</span>(n<span class="number">+1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">h[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent[index]==index?parent[index] : parent[index] = <span class="built_in">Find</span>(parent[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> index1,<span class="type">int</span> index2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> pa = <span class="built_in">Find</span>(index1);</span><br><span class="line"><span class="type">int</span> pb = <span class="built_in">Find</span>(index2); </span><br><span class="line"><span class="keyword">if</span>(pa!=pb)&#123;         </span><br><span class="line"><span class="keyword">if</span>(h[pa] &lt; h[pb])&#123;</span><br><span class="line">parent[pa] = pb;  <span class="comment">//根据秩进行合并，小秩节点成为子节点</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">parent[pb] = pa;</span><br><span class="line"><span class="keyword">if</span>(h[pa]==h[pb])++h[pa];  </span><br><span class="line">                    <span class="comment">//子节点多的节点秩大，最终保持各节点秩相对平均，即子节点数量相对平均，使得查询路径变短</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;parent;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ol><p>并查集时间复杂度参考<a href="https://oi-wiki.org/ds/dsu-complexity/">OI Wiki-并查集复杂度</a></p><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/redundant-connection/">leetcode 684.冗余连接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/posts/20c47d09/"/>
      <url>/posts/20c47d09/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂">快速幂</h1><h3 id="介绍">介绍</h3><p>快速幂，二进制取幂（<em>Binary Exponentiation</em>，也称平方法），是一个在 O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>) 的时间内计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 的小技巧，而暴力的计算需要 O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>) 的时间。</p><p>计算 a 的 n 次方表示将 n 个 a 乘在一起：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><munder><munder><mrow><mi>a</mi><mo>×</mo><mi>a</mi><mo>⋯</mo><mo>×</mo><mi>a</mi></mrow><mo stretchy="true">⏟</mo></munder><mrow><mi>n</mi><mtext> 个 a</mtext></mrow></munder></mrow><annotation encoding="application/x-tex">a^{n} = \underbrace{a \times a \cdots \times a}_{n\text{ 个 a}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.992991em;vertical-align:-1.4096609999999998em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5833300000000001em;"><span style="top:-1.5903390000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord text mtight"><span class="mord mtight"> </span><span class="mord cjk_fallback mtight">个</span><span class="mord mtight"> a</span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.58333em;"><span class="svg-align" style="top:-2.26867em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.73133em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4096609999999998em;"><span></span></span></span></span></span></span></span></span>。然而当 a,n 太大的时侯，这种方法就不太适用了。不过我们知道：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>a</mi><mi>b</mi></msup><mo>⋅</mo><msup><mi>a</mi><mi>c</mi></msup><mo separator="true">,</mo><mtext> </mtext><mtext> </mtext><msup><mi>a</mi><mrow><mn>2</mn><mi>b</mi></mrow></msup><mo>=</mo><msup><mi>a</mi><mi>b</mi></msup><mo>⋅</mo><msup><mi>a</mi><mi>b</mi></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>a</mi><mi>b</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^{b+c} = a^b \cdot a^c,\,\,a^{2b} = a^b \cdot a^b = (a^b)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">c</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。二进制取幂的想法是，我们将取幂的任务按照指数的<strong>二进制表示</strong>来分割成更小的任务。</p><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title">quik_power</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> power)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> result = <span class="number">1</span>;   <span class="comment">//用于存储项累乘与返回最终结果，由于要存储累乘所以要初始化为1</span></span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>)           <span class="comment">//指数大于0说明指数的二进制位并没有被左移舍弃完毕</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>)          <span class="comment">//指数的当前计算二进制位也就是最末尾的位是非零位也就是1的时候</span></span><br><span class="line">                                <span class="comment">//例如1001的当前计算位就是1， 100*1* 星号中的1就是当前计算使用的位</span></span><br><span class="line">            result *= base;     <span class="comment">//累乘当前项并存储</span></span><br><span class="line">        base *= base;           <span class="comment">//计算下一个项，例如当前是n^2的话计算下一项n^2的值</span></span><br><span class="line">                                <span class="comment">//n^4 = n^2 * n^2;</span></span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;            <span class="comment">//指数位右移，为下一次运算做准备</span></span><br><span class="line">                                <span class="comment">//一次的右移将舍弃一个位例如1011(2)一次左移后变成101(2)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;              <span class="comment">//返回最终结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摩尔选举求众数</title>
      <link href="/posts/94fdc98a/"/>
      <url>/posts/94fdc98a/</url>
      
        <content type="html"><![CDATA[<h1 id="摩尔选举求众数">摩尔选举求众数</h1><h3 id="介绍">介绍</h3><p>博耶-摩尔多数投票算法（<em>Boyer–Moore majority vote algorithm</em>）,中文常作多数投票算法、摩尔投票算法等，是一种用来寻找一组元素中占多数元素的常数空间复杂度、线性时间复杂度算法。这一算法由罗伯特·S·博耶和J·斯特罗瑟·摩尔在1981年发表，也是处理数据流的一种典型算法。</p><h4 id="图示">图示</h4><p><img src="/img/Boyer-Moore_MJRTY.svg" alt="摩尔选举图示" title="Boyer–Moore majority vote"></p><p>x轴为计数器中存储的元素，而下方y轴为输入的元素序列。遇到相同元素或者计数器中没有元素，计数器加入重复元素，如果遇到不同元素计数器消除一个元素。</p><hr><h3 id="算法示例">算法示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, now = nums[<span class="number">0</span>], n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">0</span>) now = nums[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(now == nums[i]) cnt++;</span><br><span class="line">        <span class="keyword">else</span> cnt--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="算法分析">算法分析</h3><ol><li>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ol><hr><h3 id="例题">例题</h3><ol><li><a href="https://leetcode.cn/problems/majority-element/">leetcode 169.多数元素</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
